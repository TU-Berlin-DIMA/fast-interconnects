var searchIndex = JSON.parse('{\
"data_store":{"doc":"","t":[0,0,13,13,13,3,4,13,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,3,3,6,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11],"n":["error","join_data","CsvError","CudaError","DatagenError","Error","ErrorKind","IntegerOverflow","InvalidArgument","InvalidConversion","IoError","LogicError","NumaGpuError","RayonThreadPoolBuildError","Result","RuntimeError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","JoinData","JoinDataBuilder","JoinDataGenFn","borrow","borrow","borrow_mut","borrow_mut","build_relation_key","build_relation_payload","build_with_data_gen","build_with_files","default","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","inner_len","inner_mem_type","into","into","mlock","outer_len","outer_mem_type","probe_relation_key","probe_relation_payload","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["data_store","","data_store::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","data_store::error::ErrorKind","","","","","","","","","","","data_store::join_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,3,4,5,6,7,8,9,10,11,12,13,0,0,0,14,15,14,15,14,14,15,15,15,14,15,14,15,14,15,14,15,14,15,15,15,14,15,15,15,15,14,14,14,15,14,15,14,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["numagpuerror",3]]],[[]],[[["errorkind",4]]],[[["error",3]]],[[["cudaerror",4]]],[[["datagenerror",3]]],[[["error",3]]],[[["threadpoolbuilderror",3]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0],["joindatagenfn",6]],["result",6]],[[["",0],["str",0],["str",0]],["result",6]],[[],["joindatabuilder",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[["",0],["usize",0]],["",0]],[[["",0],["derefmemtype",4]],["",0]],[[]],[[]],[[["",0],["bool",0]],["",0]],[[["",0],["usize",0]],["",0]],[[["",0],["derefmemtype",4]],["",0]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"ErrorKind"],[3,"Error"],[13,"CsvError"],[13,"CudaError"],[13,"DatagenError"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[13,"InvalidConversion"],[13,"IoError"],[13,"LogicError"],[13,"NumaGpuError"],[13,"RuntimeError"],[13,"RayonThreadPoolBuildError"],[3,"JoinData"],[3,"JoinDataBuilder"]]},\
"datagen":{"doc":"","t":[0,0,0,3,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11],"n":["error","popular","relation","Error","ErrorKind","IntegerOverflow","InvalidArgument","Msg","Result","borrow","borrow","borrow_mut","borrow_mut","cause","deref","deref","deref_mut","deref_mut","description","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","into","into","kind","kind","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","Blanas","Kim","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","foreign_key_len","foreign_key_len","from","from","gen","gen","init","init","into","into","primary_key_len","primary_key_len","try_from","try_from","try_into","try_into","type_id","type_id","KeyAttribute","UniformRelation","ZipfRelation","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_attr","gen_attr","gen_attr_par","gen_attr_par","gen_foreign_key_from_primary_key","gen_primary_key","gen_primary_key_par","init","init","into","into","null_key","try_from","try_from","try_from_usize","try_into","try_into","type_id","type_id"],"q":["datagen","","","datagen::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","datagen::error::ErrorKind","","","datagen::popular","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","datagen::relation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A collection of data set generators for data sets …","Data set generators for generating database relations.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Generator for the Blanas data set.","Generator for the Kim data set.","","","","","","","","","","","Rows in the foreign key relation.","Rows in the foreign key relation.","Returns the argument unchanged.","Returns the argument unchanged.","Generate the Kim data set.","Generate the Blanas data set.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Rows in the primary key relation.","Rows in the primary key relation.","","","","","","","Specifies that the type is suitable to be a join, …","Generator for relations with uniform distribution.","Generator for relations with Zipf distribution.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates a uniformly distributed attribute.","Generates an attribute following the Zipf distribution.","Generates a uniformly distributed attribute in parallel.","Generates an attribute following the Zipf distribution in …","Generates a foreign key attribute based on a primary key …","Generates a primary key attribute.","Generates a primary key attribute in parallel.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,0,1,2,1,2,2,1,2,1,2,2,1,2,1,1,2,2,1,1,1,2,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2,3,4,5,0,0,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,8,8,8,9,8,9,10,8,9,10,8,9,8,9],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]]],[[["string",3]]],[[]],[[["errorkind",4]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["errorkind",4]],null,[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["option",4,[["u32",0]]]],["result",6]],[[["option",4,[["u32",0]]]],["result",6]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[["range",3,[["usize",0]]]],["result",6]],[[["usize",0],["f64",0]],["result",6]],[[["range",3,[["usize",0]]]],["result",6]],[[["usize",0],["f64",0]],["result",6]],[[]],[[["option",4,[["u32",0]]]],["result",6]],[[["option",4,[["u32",0]]]],["result",6]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"ErrorKind"],[3,"Error"],[13,"Msg"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[3,"Kim"],[3,"Blanas"],[3,"UniformRelation"],[3,"ZipfRelation"],[8,"KeyAttribute"]]},\
"generate":{"doc":"","t":[4,4,4,4,13,13,13,3,3,4,13,4,13,13,3,6,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,5,12,5,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,12,12,12],"n":["ArgDataSet","ArgDistribution","ArgFileType","ArgTupleBytes","Blanas","Bytes16","Bytes8","CmdOpt","CmdPkFkJoin","Command","Csv","DataDistribution","Kim","PkFkJoin","Record","Result","Tsv","Uniform","Uniform","Zipf","Zipf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clap","clap","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","data_set","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distribution","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","file_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_clap","from_clap","from_clap","from_str","from_str","from_str","from_str","generate","generate_popular","init","init","init","init","init","init","init","init","init","inner_rel_path","inner_rel_tuples","into","into","into","into","into","into","into","into","into","is_percent","key","main","ne","no_compress","outer_rel_path","outer_rel_tuples","selectivity","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tuple_bytes","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variants","variants","variants","variants","write_file","zipf_exponent","0","0"],"q":["generategenerate::Command","generate::DataDistribution"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a popular data set","","","","","","","","","","","","","","","","","","","Outer relation’s data distribution","","","","","","","","","","","","","","","Set the output file type","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Inner relation output file","Inner relation size (tuples)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Enable gzip compression","Outer relation output file","Outer relation size (tuples)","Selectivity of the join, in percent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the tuple size (bytes)","","","","","","","","","","","","","","","","Zipf exponent for Zipf-sampled outer relations","",""],"i":[0,0,0,0,1,2,2,0,0,0,3,0,1,4,0,0,3,5,6,5,6,1,5,6,2,3,7,4,8,9,1,5,6,2,3,7,4,8,9,7,4,8,1,5,6,2,3,1,5,6,2,3,7,8,1,5,6,2,3,7,4,8,9,1,5,6,2,3,7,4,8,9,8,1,5,6,2,3,7,4,8,9,1,5,6,2,3,8,1,1,5,5,6,2,2,3,3,9,1,5,6,2,3,7,4,8,9,7,4,8,1,5,2,3,0,0,1,5,6,2,3,7,4,8,9,8,8,1,5,6,2,3,7,4,8,9,0,9,0,6,8,8,8,8,9,1,5,6,2,3,1,5,2,3,1,5,6,2,3,7,4,8,9,1,5,6,2,3,7,4,8,9,8,1,5,6,2,3,7,4,8,9,9,1,5,2,3,0,8,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[["",0]],["argdataset",4]],[[["",0]],["argdistribution",4]],[[["",0]],["datadistribution",4]],[[["",0]],["argtuplebytes",4]],[[["",0]],["argfiletype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["argdataset",4]],["bool",0]],[[["",0],["argdistribution",4]],["bool",0]],[[["",0],["datadistribution",4]],["bool",0]],[[["",0],["argtuplebytes",4]],["bool",0]],[[["",0],["argfiletype",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["usize",0],["usize",0],["datadistribution",4],["option",4,[["u32",0]]]],["result",4,[["box",3,[["error",8]]]]]],[[["argdataset",4],["option",4,[["u32",0]]]],["result",4,[["box",3,[["error",8]]]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["string",3]],["result",4,[["string",3]]]],null,[[],["result",4,[["box",3,[["error",8]]]]]],[[["",0],["datadistribution",4]],["bool",0]],null,null,null,null,[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["argfiletype",4]],["result",4,[["box",3,[["error",8]]]]]],null,null,null],"p":[[4,"ArgDataSet"],[4,"ArgTupleBytes"],[4,"ArgFileType"],[4,"Command"],[4,"ArgDistribution"],[4,"DataDistribution"],[3,"CmdOpt"],[3,"CmdPkFkJoin"],[3,"Record"],[13,"PkFkJoin"],[13,"Zipf"]]},\
"hashjoin":{"doc":"","t":[3,5,12,11,11,11,12,12,12,12,5,12,11,11,12,11,0,12,11,11,12,12,12,12,12,12,12,11,12,12,12,11,5,5,12,0,12,12,12,12,12,12,12,11,12,12,12,11,11,12,11,0,12,12,13,13,13,13,3,4,13,13,13,13,13,13,13,13,6,8,13,13,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,3,12,11,11,12,12,12,12,12,12,12,12,11,11,12,12,12,11,11,11,12,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,5,11,11,12,11,12,11,11,12,11,12,12,5,17,3,3,3,12,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,4,4,4,4,4,3,4,4,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["CmdOpt","args_to_bench","block_size","borrow","borrow_mut","clap","cpu_affinity","cpu_morsel_bytes","csv","data_distribution","data_gen_fn","data_set","deref","deref_mut","device_id","drop","error","execution_method","from","from_clap","gpu_affinity","gpu_morsel_bytes","grid_size","hash_table_location","hash_table_mem_type","hash_table_proportions","hashing_scheme","init","inner_rel_file","inner_rel_location","inner_rel_tuples","into","is_percent","main","max_hash_table_cache_size","measurement","mem_type","outer_rel_file","outer_rel_location","outer_rel_tuples","page_type","repeat","selectivity","set_spill_hash_table","spill_hash_table","threads","transfer_strategy","try_from","try_into","tuple_bytes","type_id","types","zipf_exponent","0","Csv","Cuda","DataStore","Datagen","Error","ErrorKind","IntegerOverflow","InvalidArgument","InvalidConversion","Io","LogicError","Msg","NumaGpu","RayonThreadPoolBuild","Result","ResultExt","RuntimeError","SqlOps","backtrace","backtrace","borrow","borrow","borrow_mut","borrow_mut","chain_err","chain_err","chain_err","deref","deref","deref_mut","deref_mut","description","description","description","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_kind","from_kind","init","init","into","into","iter","iter","kind","kind","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_boxed_chain","with_chain","with_chain","0","0","0","0","0","0","0","0","0","0","0","0","0","0","data_point","harness","hash_join_bench","DataPoint","block_size","borrow","borrow_mut","build_bytes","build_compute_ns","build_cool_down_ns","build_copy_ns","build_ns","build_tuples","build_warm_up_ns","cached_hash_table_tuples","clone","clone_into","cpu_morsel_bytes","data_distribution","data_set","default","deref","deref_mut","device_codename","drop","execution_method","fill_from_cmd_options","fill_from_hash_join_bench","fill_from_join_data","fmt","from","gpu_morsel_bytes","grid_size","hash_table_malloc_ns","hash_table_memory_location","hash_table_memory_type","hash_table_proportions","hash_table_tuples","hashing_scheme","hostname","init","inner_relation_memory_location","into","join_selectivity","new","nvtx_run_id","outer_relation_memory_location","page_type","probe_bytes","probe_compute_ns","probe_cool_down_ns","probe_copy_ns","probe_ns","probe_tuples","probe_warm_up_ns","relation_gen_ns","relation_malloc_ns","relation_memory_type","serialize","serialize_vec","set_gpu_threads","set_init_time","threads","to_owned","transfer_strategy","try_from","try_into","tuple_bytes","type_id","warm_up","zipf_exponent","measure","GPU_MEM_SLACK_BYTES","HashJoinBench","HashJoinBenchBuilder","HashJoinPoint","_phantom_data","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_compute_ns","build_cool_down_ns","build_copy_ns","build_ns","build_warm_up_ns","cached_hash_table_tuples","cpu_hash_join","cuda_hash_join","cuda_streaming_hash_join","cuda_streaming_unified_hash_join","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","get_hash_table_len","gpu_build_heterogeneous_probe","hash_table_len","hash_table_load_factor","hash_table_load_factor","hash_table_malloc_ns","hashing_scheme","hashing_scheme","hashing_scheme","hetrogeneous_hash_join","init","init","init","into","into","into","is_selective","is_selective","is_selective","probe_compute_ns","probe_cool_down_ns","probe_copy_ns","probe_ns","probe_warm_up_ns","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ArgDataDistribution","ArgDataSet","ArgExecutionMethod","ArgHashingScheme","ArgMemType","ArgMemTypeHelper","ArgPageType","ArgTransferStrategy","ArgTupleBytes","Blanas","Blanas4MB","Bytes16","Bytes8","Coherence","Cpu","Custom","DataDistribution","Default","Device","DistributedNuma","Gpu","GpuBuildHetProbe","GpuStream","Het","Huge16GB","Huge16MB","Huge1GB","Huge2MB","Kim","LazyPinnedCopy","LinearProbing","Lutz2Gv32G","Lutz32Gv32G","Numa","NumaLazyPinned","PageableCopy","Perfect","Pinned","PinnedCopy","Small","System","Test","TransparentHuge","Unified","Unified","Uniform","Uniform","Zipf","Zipf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","mem_type","ne","node_ratios","page_type","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variants","variants","variants","variants","variants","variants","variants","variants","0"],"q":["hashjoin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashjoin::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashjoin::error::ErrorKind","","","","","","","","","","","","","","hashjoin::measurement","","","hashjoin::measurement::data_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashjoin::measurement::harness","hashjoin::measurement::hash_join_bench","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashjoin::typeshashjoin::types::DataDistribution"],"d":["","","The CUDA block size [Default: 1024]","","","","Path to CPU affinity map file for CPU workers","","Output filename for measurement CSV file","Outer relation’s data distribution","","Use a pre-defined or custom data set.","","","Execute on GPU (See CUDA device list)","","","Execute on device(s) with in-place or streaming-transfer …","Returns the argument unchanged.","","Path to CPU affinity map file for GPU workers","","The CUDA grid size [Default: all SMs]","Allocate memory for hash table on NUMA nodes (e.g.: 0,1,2) …","Memory type with which to allocate hash table.","Proportions with with the hash table is allocate on …","Hashing scheme to use in hash table.","","Load data set from a TSV file with “key value” pairs …","Allocate memory for inner relation on CPU or GPU (See …","Set the inner relation size (tuples); required for …","Calls <code>U::from(self)</code>.","","","Device memory used to cache hash table (upper limit, in …","","Memory type with which to allocate data.","Load data set from a TSV file with “key value” pairs …","Allocate memory for outer relation on CPU or GPU (See …","Set the outer relation size (tuples); required for …","Page type with with to allocate memory","Number of times to repeat benchmark","Selectivity of the join, in percent","","Cache the hash table in GPU memory and spill to the …","","Stream data to device using the transfer strategy.","","","Set the tuple size (bytes)","","","Zipf exponent for Zipf-sampled outer relations","The kind of the error.","","","","","The Error type.","The kind of an error.","","","","","","A convenient variant for String.","","","Convenient wrapper around <code>std::Result</code>.","Additional methods for <code>Result</code>, for easy interaction with …","","","","Returns the backtrace associated with this error.","","","","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …","Extends the error chain with a new entry.","","","","","","A short description of the error. This method is identical …","","A string describing the error kind.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Constructs an error from a kind, and generates a backtrace.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Iterates over the error chain.","","Returns the kind of the error.","","","","","","","","","","Construct a chained error from another boxed error and a …","Constructs a chained error from another error and a kind, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Serialize <code>Option&lt;Vec&lt;T&gt;&gt;</code> by converting it into a <code>String</code>.","","","","","","","","","","","","","GPU memory to leave free when allocating a hybrid hash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,3,3,3,3,0,0,3,3,3,3,3,3,3,3,0,0,3,3,2,2,2,3,2,3,4,2,2,2,3,2,3,2,2,3,2,3,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,2,2,2,3,2,3,2,2,2,2,2,2,3,2,3,2,3,2,3,2,2,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,20,20,21,22,20,21,22,21,22,22,22,22,22,22,20,20,20,20,21,22,20,21,22,20,21,22,20,21,22,22,20,21,22,21,20,20,21,21,22,21,20,21,20,20,21,22,20,21,22,21,20,21,22,22,22,22,22,20,21,22,20,21,22,20,21,22,0,0,0,0,0,0,0,0,0,23,23,24,24,25,26,23,0,27,28,28,26,26,26,26,27,27,27,27,23,25,29,23,23,28,28,25,29,28,25,27,28,23,27,28,25,30,31,30,31,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,23,30,31,28,27,26,25,29,24,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,23,23,30,30,31,28,28,27,27,26,26,25,25,29,29,24,24,32,23,30,31,28,27,26,25,29,24,32,23,30,28,27,26,25,29,24,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,32,31,32,32,30,28,27,26,25,29,24,23,30,31,28,27,26,25,29,24,23,30,28,27,26,25,29,24,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,23,30,31,28,27,26,25,29,24,32,23,30,28,27,26,25,29,24,33],"f":[null,[[["cmdopt",3],["device",3]],["result",4,[["error",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],null,null,null,null,[[["argdataset",4],["option",4,[["usize",0]]],["option",4,[["usize",0]]],["datadistribution",4],["option",4,[["u32",0]]]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,null,[[]],[[["argmatches",3]]],null,null,null,null,null,null,null,[[],["usize",0]],null,null,null,[[]],[[["string",3]],["result",4,[["string",3]]]],[[],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,[[["",0],["option",4,[["u16",0]]],["u16",0]],["result",4,[["error",3]]]],null,null,null,[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4,[["error",3]]]],[[],["error",3]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["datagenerror",3]]],[[["threadpoolbuilderror",3]]],[[["error",3]]],[[["numagpuerror",3]]],[[["str",0]]],[[["datastoreerror",3]]],[[["cudaerror",4]]],[[]],[[["string",3]]],[[["error",3]]],[[["sqlopserror",3]]],[[["errorkind",4]]],[[]],[[["string",3]]],[[["str",0]]],[[["error",3]]],[[["errorkind",4]],["error",3]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["iter",3]],[[["",0]],["iter",3]],[[["",0]]],[[["",0]],["errorkind",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["box",3,[["error",8]]]],["error",3]],[[],["error",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,[[["",0],["cmdopt",3]],["result",6,[["datapoint",3]]]],[[["",0],["hashjoinbench",3]],["datapoint",3]],[[["",0],["joindata",3]],["datapoint",3]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,null,null,null,null,null,null,null,[[],["usize",0]],null,[[]],null,[[],["result",6,[["datapoint",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["option",4]],["result",4]],[[["",0],["gridsize",3],["blocksize",3]],["datapoint",3]],[[["",0],["duration",3],["duration",3]],["datapoint",3]],null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,[[["str",0],["u32",0],["option",4,[["pathbuf",3]]],["datapoint",3],["box",3,[["fnmut",8]]]],["result",4,[["error",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["result",4,[["hashjoinbench",3],["error",3]]]],null,null,null,null,null,null,[[["",0],["joindata",3],["usize",0],["cpuaffinity",3],["derefmemallocfn",6,[["htentry",6]]]],["result",4,[["hashjoinpoint",3],["error",3]]]],[[["",0],["joindata",3],["memspillallocfn",6,[["htentry",6]]],["u16",0],["option",4,[["usize",0]]],["rc",3,[["refcell",3,[["option",4,[["usize",0]]]]]]]],["result",4,[["hashjoinpoint",3],["error",3]]]],[[["",0],["joindata",3],["memallocfn",6,[["htentry",6]]],["cudatransferstrategy",4],["usize",0],["usize",0],["cpuaffinity",3]],["result",4,[["hashjoinpoint",3],["error",3]]]],[[["",0],["joindata",3],["memallocfn",6,[["htentry",6]]],["usize",0]],["result",4,[["hashjoinpoint",3],["error",3]]]],[[],["hashjoinbenchbuilder",3]],[[],["hashjoinpoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["usize",0]],["result",4,[["usize",0],["error",3]]]],[[["",0],["joindata",3],["memallocfn",6,[["htentry",6]]],["memallocfn",6,[["htentry",6]]],["usize",0],["workercpuaffinity",3],["vec",3,[["u16",0]]],["morselspec",3]],["result",4,[["hashjoinpoint",3],["error",3]]]],null,[[["",0],["usize",0]],["",0]],null,null,[[["",0],["hashingscheme",4]],["",0]],null,null,[[["",0],["joindata",3],["memallocfn",6,[["htentry",6]]],["usize",0],["workercpuaffinity",3],["vec",3,[["u16",0]]],["morselspec",3]],["result",4,[["hashjoinpoint",3],["error",3]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["",0],["bool",0]],["",0]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argdataset",4]],[[["",0]],["argdatadistribution",4]],[[["",0]],["datadistribution",4]],[[["",0]],["argmemtype",4]],[[["",0]],["argpagetype",4]],[[["",0]],["argexecutionmethod",4]],[[["",0]],["argtransferstrategy",4]],[[["",0]],["arghashingscheme",4]],[[["",0]],["argtuplebytes",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["argdataset",4]],["bool",0]],[[["",0],["argdatadistribution",4]],["bool",0]],[[["",0],["datadistribution",4]],["bool",0]],[[["",0],["argmemtype",4]],["bool",0]],[[["",0],["argpagetype",4]],["bool",0]],[[["",0],["argexecutionmethod",4]],["bool",0]],[[["",0],["argtransferstrategy",4]],["bool",0]],[[["",0],["arghashingscheme",4]],["bool",0]],[[["",0],["argtuplebytes",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["datadistribution",4]],["bool",0]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null],"p":[[3,"CmdOpt"],[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[13,"Csv"],[13,"Cuda"],[13,"DataStore"],[13,"Datagen"],[13,"Io"],[13,"NumaGpu"],[13,"SqlOps"],[13,"RayonThreadPoolBuild"],[13,"Msg"],[13,"InvalidArgument"],[13,"InvalidConversion"],[13,"IntegerOverflow"],[13,"LogicError"],[13,"RuntimeError"],[3,"DataPoint"],[3,"HashJoinBench"],[3,"HashJoinBenchBuilder"],[3,"HashJoinPoint"],[4,"ArgDataSet"],[4,"ArgTupleBytes"],[4,"ArgTransferStrategy"],[4,"ArgExecutionMethod"],[4,"ArgPageType"],[4,"ArgMemType"],[4,"ArgHashingScheme"],[4,"ArgDataDistribution"],[4,"DataDistribution"],[3,"ArgMemTypeHelper"],[13,"Zipf"]]},\
"microbench":{"doc":"","t":[4,4,3,4,13,13,13,3,3,3,3,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,12,12,12,12,12,12,12,12,0,0,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,3,4,13,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,4,13,3,4,13,13,13,13,13,13,13,13,4,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,6,3,11,11,11,11,5,5,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,12,14,11,11,12,11,11,11,11,11,11,11,3,11,11,12,12,11,11,12,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,14,11,11,12,11,11,12,12,11,11,11,11,11,11,11,12,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,12,12,12,11,11,11,12,12,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,3,3,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,11,11,12,12,11,11,11,12,12,12,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,3,6,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,4,3,3,13,6,3,3,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArgDeviceType","ArgMemType","ArgMemTypeHelper","ArgPageType","Bandwidth","Bidirectional","CPU","CmdBandwidth","CmdCudaCopy","CmdLatency","CmdNumaCopy","CmdTlbLatency","Command","CopyMethod","CudaCopy","Default","Device","DeviceToHost","GPU","HostToDevice","Huge16GB","Huge16MB","Huge1GB","Huge2MB","Latency","Numa","NumaCopy","NumaPinned","Options","Pinned","Small","System","TlbLatency","TransparentHuge","Unified","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","block_sizes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clap","clap","clap","clap","clap","clap","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmd","copy_direction","cpu_affinity","cpu_affinity","cpu_node","csv","cuda_memcopy","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","device_id","device_id","device_id","device_id","device_type","device_type","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dst_node","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_clap","from_clap","from_clap","from_clap","from_clap","from_clap","from_clap","from_str","from_str","from_str","from_str","grid_sizes","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","iotlb_flush","loop_length","main","mem_location","mem_location","mem_location","mem_location","mem_type","mem_type","mem_type","mem_type","mem_type","memory_bandwidth","memory_latency","misalign_warp","node","numa_memcopy","page_type","page_type","page_type","page_type","page_type","page_type","range_lower","range_lower","range_upper","range_upper","repeat","repeat","repeat","repeat","serialize","serialize","serialize","serialize","size","size","size","src_node","stride_lower","stride_upper","strides","target_cycles","threads","threads","tlb_latency","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","value_into","variants","variants","variants","variants","0","0","0","0","0","CudaMemcopy","DataPoint","Measurement","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone_into","copy_method","copy_ns","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","device_codename","drop","drop","drop","fmt","from","from","from","hostname","init","init","init","into","into","into","malloc_ns","measure","mem_type","memory_node","mlock_ns","page_type","pin_ns","run","serialize","time_cuda_memcpy","to_owned","transfers_overlap","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","value_from","value_from","value_from","value_into","value_into","value_into","warm_up","CsvError","CudaError","Error","ErrorKind","IntegerOverflow","InvalidArgument","IoError","Msg","NulCharError","NumaGpuError","NvmlError","Result","RuntimeError","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","into","into","kind","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","0","0","0","0","0","0","0","0","0","0","Benchmark","Bytes16","Bytes4","Bytes8","CompareAndSwap","ItemBytes","LinearCongruentialGenerator","MemoryBandwidth","MemoryOperation","Read","Sequential","Threads1","Threads16","Threads2","Threads32","Threads4","Threads8","TileSize","WARP_MISALIGNMENT","Write","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cpu_measurement","cpu_memory_bandwidth","data_point","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","gpu_measurement","gpu_memory_bandwidth","init","init","init","init","init","into","into","into","into","into","measure","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","CpuMeasurement","approx_from","approx_into","borrow","borrow_mut","cpu_affinity","deref","deref_mut","drop","from","init","into","measure","new","template","threads","try_from","try_from","try_into","try_into","type_id","value_from","value_into","CpuBandwidthFn","CpuMemoryBandwidth","approx_from","approx_into","borrow","borrow_mut","cpu_cas_bandwidth_lcg_16B","cpu_cas_bandwidth_lcg_4B","cpu_cas_bandwidth_lcg_8B","cpu_cas_bandwidth_seq_16B","cpu_cas_bandwidth_seq_4B","cpu_cas_bandwidth_seq_8B","cpu_node","cpu_read_bandwidth_lcg_16B","cpu_read_bandwidth_lcg_4B","cpu_read_bandwidth_lcg_8B","cpu_read_bandwidth_seq_16B","cpu_read_bandwidth_seq_4B","cpu_read_bandwidth_seq_8B","cpu_write_bandwidth_lcg_16B","cpu_write_bandwidth_lcg_4B","cpu_write_bandwidth_lcg_8B","cpu_write_bandwidth_seq_16B","cpu_write_bandwidth_seq_4B","cpu_write_bandwidth_seq_8B","deref","deref_mut","drop","fmt","from","init","into","loop_length","make_benchmark","new","run","target_cycles","try_from","try_from","try_into","try_into","type_id","value_from","value_into","DataPoint","approx_from","approx_into","benchmark","block_size","borrow","borrow_mut","clock_rate_mhz","clone","clone_into","cpu_node","cycles","default","deref","deref_mut","device_codename","device_type","drop","fmt","from","grid_size","hostname","init","into","item_bytes","memory_accesses","memory_node","memory_operation","memory_type","ns","page_type","range_bytes","serialize","threads","throttle_reasons","tile_size","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","warm_up","warp_aligned","GpuMeasurement","GpuMeasurementParameters","approx_from","approx_from","approx_into","approx_into","block_size","block_sizes","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","device_id","drop","drop","drop","from","from","grid_size","grid_sizes","init","init","into","into","measure","new","nvml","template","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","GpuMemoryBandwidth","approx_from","approx_into","borrow","borrow_mut","buffer_len","deref","deref_mut","drop","fmt","from","gen_cuda_functions","init","into","loop_length","new","run","stream","target_cycles","try_from","try_from","try_into","try_into","type_id","value_from","value_into","warp_misalignment","CpuMemoryLatency","DataPoint","GpuMemoryLatency","Measurement","MeasurementParameters","MemoryLatency","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clock_rate_mhz","clone","clone_into","cpu_node","cpu_stride","cycles","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","device_codename","device_id","device_type","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hostname","init","init","init","init","init","init","into","into","into","into","into","into","iterations","iterations","load_module","measure","measure","memory_node","memory_type","module","new","new","new","ns","nvml","page_type","prepare","prepare","prepare_prefetch","range","range_bytes","run","run","serialize","stride","stride","stride_bytes","template","throttle_reasons","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into","warm_up","write_strides","DataPoint","NumaMemcopy","approx_from","approx_from","approx_into","approx_into","borrow","borrow","borrow_mut","borrow_mut","bytes","cpu_node","cpu_node","deref","deref","deref_mut","deref_mut","drop","drop","dst","dst_node","fmt","from","from","hostname","init","init","into","into","measure","new","ns","page_type","page_type","run_rayon","run_sequential","serialize","src","src_node","thread_pool","threads","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","value_from","value_from","value_into","value_into","warm_up","TlbLatency","approx_from","approx_into","borrow","borrow_mut","data_point","deref","deref_mut","drop","from","gpu_tlb_latency","init","into","measure","try_from","try_from","try_into","try_into","type_id","value_from","value_into","DataPoint","approx_from","approx_into","block_size","borrow","borrow_mut","clock_rate_mhz","clone","clone_into","cycle_counter_overhead_cycles","cycles","default","deref","deref_mut","device_codename","device_id","device_type","drop","fmt","from","from_cmd_options","grid_size","hostname","index_bytes","init","into","iotlb_flush","memory_location","memory_type","ns","page_type","range_bytes","serialize","stride_bytes","stride_id","threads","throttle_reasons","tlb_status","to_owned","try_from","try_from","try_into","try_into","type_id","value_from","value_into","GpuTlbLatency","Position","_context","approx_from","approx_into","borrow","borrow_mut","cycle_counter_overhead","deref","deref_mut","device_id","drop","drop","flush_cpu_tlb","fmt","from","init","into","load_module","measure","module","new","nvml","template","try_from","try_from","try_into","try_into","type_id","value_from","value_into","write_strides","0","0","0","0","BareMemType","Block","Cycles","Device","DeviceId","Grid","MemTypeDescription","Numa","NumaPinned","Pinned","System","ThreadCount","Unified","approx_from","approx_from","approx_from","approx_from","approx_from","approx_from","approx_into","approx_into","approx_into","approx_into","approx_into","approx_into","bare_mem_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","location","ne","ne","ne","ne","page_type","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value_from","value_from","value_from","value_from","value_from","value_from","value_into","value_into","value_into","value_into","value_into","value_into"],"q":["microbenchmicrobench::Command","","","","","microbench::cuda_memcopy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::error::ErrorKind","","","","","","","","","","microbench::memory_bandwidth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_bandwidth::cpu_measurement","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_bandwidth::cpu_memory_bandwidth","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_bandwidth::data_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_bandwidth::gpu_measurement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_bandwidth::gpu_memory_bandwidth","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::memory_latency","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::numa_memcopy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::tlb_latency","","","","","","","","","","","","","","","","","","","","","microbench::tlb_latency::data_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::tlb_latency::gpu_tlb_latency","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","microbench::typesd":["","","","","Memory bandwidth test with random access pattern based on …","","","","","","","","","","GPU interconnect bandwidth test based on cudaMemcpy","","","","","","","","","","Memory latency test based on loop over buffer with …","","NUMA interconnect bandwidth test based on memcpy","","","","","","TLB latency test based on loop over buffer with increasing …","","","","","","","","","","","","","","","","","","","","","","","","","","","The CUDA block sizes to evaluate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Direction in which to execute the copy","Path to CPU affinity map file for CPU workers","Path to CPU affinity map file for CPU workers","CPU NUMA node ID","CSV output file","","","","","","","","","","","","","","","","","","","","","","","","","","Execute on CPU or GPU (See numactl -H and CUDA device list)","Execute on CPU or GPU (See numactl -H and CUDA device list)","GPU ID to run on (See CUDA device list)","Execute on GPU (See CUDA device list)","Type of the device.","Type of the device.","","","","","","","","","","","","","Destination NUMA node ID","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","The CUDA grid sizes to evaluate","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Flush the CPU TLB and IOTLB before each measurement series …","Number of memory accesses in between cycle measurements","","Allocate memory on CPU or GPU (See numactl -H and CUDA …","Allocate memory on CPU or GPU (See numactl -H and CUDA …","Allocate memory on CPU or GPU (See numactl -H and CUDA …","Allocate memory on NUMA node (See numactl -H)","","Memory type with which to allocate data.","Memory type with which to allocate data.","Memory type with which to allocate data.","Memory type with which to allocate data","","","Don’t align warp-cooperative accesses to the tile size","","","","Page type with with to allocate memory","Page type with with to allocate memory","Page type with with to allocate memory","Page type with with to allocate memory","Page type with with to allocate memory","Smallest buffer size (KB)","Smallest buffer size (MiB)","Largest buffer size (KB)","Largest buffer size (MiB)","Number of times to repeat benchmark","Number of times to repeat benchmark","Number of times to repeat benchmark","Number of times to repeat benchmark","","","","","Size of buffer (MB)","Size of buffer to copy (MB)","Size of buffer to copy (MB)","Source NUMA node ID","Smallest stride length (Bytes)","Largest stride length (Bytes)","List of stride lengths (KiB)","Minimum number of clock cycles to measure before quitting …","Number of CPU threads","Number of threads to run (shouldn’t exceed #CPUs of one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Generate CUDA function bindings that are callable from Rust","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Measures the overhead of <code>get_clock()</code> in cycles","","","","","","Flushes the CPU’s TLB","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Initializes a slice with strides","","","","","","CUDA block size","Clock cycles","","The device type and it’s ID","CUDA grid size","","","","","","Thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,0,0,0,0,0,0,0,1,4,5,2,3,2,4,4,4,4,1,5,1,5,0,5,4,5,1,4,5,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,6,7,1,8,9,10,11,12,8,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,6,7,1,8,9,10,11,12,7,1,8,9,10,11,12,3,2,4,5,3,2,4,5,7,12,8,11,11,7,0,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,6,7,1,8,9,10,11,12,8,9,10,12,8,9,3,2,4,5,6,7,1,8,9,10,11,12,11,3,2,4,5,0,3,3,2,2,4,4,5,5,6,3,2,4,4,5,6,7,1,8,9,10,11,12,7,1,8,9,10,11,12,3,2,4,5,8,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,6,7,1,8,9,10,11,12,10,8,0,8,9,10,12,6,8,9,10,12,0,0,8,6,0,6,8,9,10,11,12,9,10,9,10,8,9,11,12,3,2,4,5,8,11,12,11,9,9,10,8,8,11,0,3,2,4,5,3,2,4,5,3,3,2,2,4,4,5,5,6,6,7,7,1,1,8,8,9,9,10,10,11,11,12,12,3,3,2,2,4,4,5,5,6,6,7,7,1,1,8,8,9,9,10,10,11,11,12,12,3,2,4,5,6,7,1,8,9,10,11,12,0,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,6,7,1,8,9,10,11,12,3,2,4,5,13,14,15,16,17,0,0,0,18,19,20,18,19,20,18,19,20,18,19,20,20,20,20,20,20,20,18,19,20,18,19,20,20,18,19,20,20,18,19,20,20,18,19,20,18,19,20,20,18,20,20,20,20,20,19,20,19,20,20,18,18,19,19,20,20,18,18,19,19,20,20,18,19,20,18,19,20,18,19,20,20,21,21,0,0,21,21,21,21,21,21,21,0,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,21,22,22,21,22,22,22,22,22,22,22,22,22,21,22,21,22,22,21,22,21,21,22,22,21,21,22,22,21,22,21,22,21,22,23,24,25,26,27,28,29,30,31,32,0,33,33,33,34,0,35,0,0,34,35,36,36,36,36,36,36,0,0,34,37,34,35,33,36,37,34,35,33,36,37,34,35,33,36,37,34,35,33,36,34,35,33,36,34,35,33,36,0,0,0,37,34,35,33,36,37,34,35,33,36,37,34,35,33,36,36,34,35,33,36,37,34,35,33,36,0,0,37,34,35,33,36,37,34,35,33,36,37,34,35,33,36,34,35,33,36,37,37,34,34,35,35,33,33,36,36,37,37,34,34,35,35,33,33,36,36,37,34,35,33,36,37,34,35,33,36,37,34,35,33,36,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,39,39,39,39,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,0,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,41,42,41,42,41,42,41,42,41,42,41,42,41,42,42,41,42,42,41,42,41,42,41,42,41,42,42,42,42,42,41,41,42,42,41,41,42,42,41,42,41,42,41,42,0,43,43,43,43,43,43,43,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,44,45,46,47,48,49,44,45,46,47,48,49,44,45,46,47,48,49,44,45,46,47,48,49,45,45,45,45,0,45,45,44,45,46,47,48,49,44,45,46,47,48,49,45,47,45,44,45,46,47,48,49,45,46,47,48,49,44,45,46,47,48,49,45,44,45,46,47,48,49,44,45,46,47,48,49,45,49,47,44,46,45,45,47,46,47,48,45,47,45,47,48,47,46,45,47,48,45,46,49,45,46,45,45,44,44,45,45,46,46,47,47,48,48,49,49,44,44,45,45,46,46,47,47,48,48,49,49,44,45,46,47,48,49,44,45,46,47,48,49,44,45,46,47,48,49,45,0,0,0,50,51,50,51,50,51,50,51,51,50,51,50,51,50,51,50,51,50,51,51,50,51,51,50,51,50,51,50,50,51,50,51,50,50,51,50,51,50,51,50,50,51,51,50,50,51,51,50,51,50,51,50,51,51,0,52,52,52,52,0,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,56,57,58,0,0,0,59,0,0,0,59,59,59,59,0,59,59,60,55,56,57,58,59,60,55,56,57,58,60,59,60,55,56,57,58,59,60,55,56,57,58,59,55,56,57,58,59,55,56,57,58,55,56,57,58,55,56,57,58,59,60,55,56,57,58,59,60,55,56,57,58,59,60,55,56,57,58,59,55,56,57,58,59,60,55,56,57,58,59,60,60,55,56,57,58,59,60,55,56,57,58,59,60,55,56,57,58,60,55,56,57,58,60,55,56,57,58,59,55,56,57,58,59,55,56,57,58,59,59,60,60,55,55,56,56,57,57,58,58,59,59,60,60,55,55,56,56,57,57,58,58,59,60,55,56,57,58,59,60,55,56,57,58,59,60,55,56,57,58],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[["",0]],["argdevicetype",4]],[[["",0]],["copymethod",4]],[[["",0]],["argpagetype",4]],[[["",0]],["argmemtype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,null,null,null,null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["argdevicetype",4]],["bool",0]],[[["",0],["copymethod",4]],["bool",0]],[[["",0],["argpagetype",4]],["bool",0]],[[["",0],["argmemtype",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["pagetype",4]],["argpagetype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["argmatches",3]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,[[["u32",0],["memtype",4],["u32",0],["option",4]]],null,null,null,null,null,[[["memtype",4],["copymethod",4],["usize",0]]],[[["",0]],["result",4]],[[["launchablemutslice",3,[["devicecopy",8]]],["launchableslice",3,[["devicecopy",8]]],["stream",3]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["errorkind",4]]],[[["nvmlerror",4]]],[[["numagpuerror",3]]],[[["ioerror",3]]],[[["cudaerror",4]]],[[["csverror",3]]],[[["str",0]]],[[["string",3]]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memoryoperation",4]],[[["",0]],["benchmark",4]],[[["",0]],["itembytes",4]],[[["",0]],["tilesize",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["tilesize",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["devicetype",4,[["u16",0],["u32",0]]],["memtype",4],["usize",0],["vec",3,[["threadcount",3]]],["cpuaffinity",3],["vec",3,[["grid",3]]],["vec",3,[["block",3]]],["bool",0],["u32",0],["cycles",3],["u32",0],["option",4]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["",0],["derefmem",4],["vec",3,[["benchmark",4]]],["vec",3,[["memoryoperation",4]]],["vec",3,[["itembytes",4]]],["u32",0]],["vec",3,[["datapoint",3]]]],[[["vec",3,[["threadcount",3]]],["cpuaffinity",3],["datapoint",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,null,[[["u16",0],["u32",0],["cycles",3]]],[[["benchmark",4],["memoryoperation",4],["itembytes",4],["",0],["derefmem",4],["rc",3,[["threadpool",3]]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,[[],["usize",0]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["result",4]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["mem",4],["vec",3,[["benchmark",4]]],["vec",3,[["memoryoperation",4]]],["vec",3,[["itembytes",4]]],["vec",3,[["tilesize",4]]],["bool",0],["u32",0]],["vec",3,[["datapoint",3]]]],[[["u32",0],["vec",3,[["grid",3]]],["vec",3,[["block",3]]],["datapoint",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],null,[[["usize",0],["usize",0],["u32",0],["cycles",3]]],[[["benchmark",4],["memoryoperation",4],["itembytes",4],["tilesize",4],["",0],["mem",4],["gpumeasurementparameters",3],["nvmldevice",3]],["option",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["module",3]],[[["devicetype",4,[["u16",0],["u32",0]]],["memtype",4],["rangeinclusive",3,[["usize",0]]],["rangeinclusive",3,[["usize",0]]],["u32",0],["option",4]]],[[["",0],["mem",4,[["u32",0]]],["u32",0]],["vec",3,[["datapoint",3]]]],null,null,null,[[["rangeinclusive",3,[["usize",0]]],["rangeinclusive",3,[["usize",0]]],["datapoint",3]]],[[["u32",0]]],[[["u16",0]]],null,null,null,[[["",0],["mem",4],["measurementparameters",3]]],[[["",0],["mem",4],["measurementparameters",3]]],[[["",0],["mem",4],["measurementparameters",3]]],null,null,[[["",0],["mem",4],["measurementparameters",3]]],[[["",0],["mem",4],["measurementparameters",3]]],[[["",0]],["result",4]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["usize",0]],["usize",0]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["bool",0],["u32",0],["option",4]]],[[["usize",0],["u16",0],["u16",0],["argpagetype",4],["usize",0],["u16",0],["option",4,[["cpuaffinity",3]]]]],null,null,null,[[["",0]],["duration",3]],[[["",0]],["duration",3]],[[["",0]],["result",4]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],null,[[],["usize",0]],[[]],[[["u16",0],["memtype",4],["rangeinclusive",3,[["usize",0]]],["bool",0],["datapoint",3],["option",4]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,null,[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["cmdtlblatency",3]],["result",4,[["datapoint",3],["error",3]]]],null,null,null,[[],["usize",0]],[[]],null,null,null,null,null,null,[[["",0]],["result",4]],null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["u32",0],["error",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["",0]]],[[["usize",0]]],[[],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[],["result",4,[["module",3],["error",3]]]],[[["",0],["memtype",4],["rangeinclusive",3,[["usize",0]]],["bool",0]],["result",4,[["vec",3,[["datapoint",3]]],["error",3]]]],null,[[["u32",0],["datapoint",3]],["result",4,[["error",3]]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[["usize",0],["option",4,[["usize",0]]]],["usize",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["barememtype",4]],[[["",0]],["cycles",3]],[[["",0]],["grid",3]],[[["",0]],["block",3]],[[["",0]],["threadcount",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["cycles",3]],["ordering",4]],[[["",0],["grid",3]],["ordering",4]],[[["",0],["block",3]],["ordering",4]],[[["",0],["threadcount",3]],["ordering",4]],[[],["cycles",3]],[[],["grid",3]],[[],["block",3]],[[],["threadcount",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["barememtype",4]],["bool",0]],[[["",0],["cycles",3]],["bool",0]],[[["",0],["grid",3]],["bool",0]],[[["",0],["block",3]],["bool",0]],[[["",0],["threadcount",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["memtype",4]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["cycles",3]],["bool",0]],[[["",0],["grid",3]],["bool",0]],[[["",0],["block",3]],["bool",0]],[[["",0],["threadcount",3]],["bool",0]],null,[[["",0],["cycles",3]],["option",4,[["ordering",4]]]],[[["",0],["grid",3]],["option",4,[["ordering",4]]]],[[["",0],["block",3]],["option",4,[["ordering",4]]]],[[["",0],["threadcount",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[4,"Command"],[4,"CopyMethod"],[4,"ArgDeviceType"],[4,"ArgPageType"],[4,"ArgMemType"],[3,"ArgMemTypeHelper"],[3,"Options"],[3,"CmdBandwidth"],[3,"CmdLatency"],[3,"CmdTlbLatency"],[3,"CmdNumaCopy"],[3,"CmdCudaCopy"],[13,"Bandwidth"],[13,"Latency"],[13,"TlbLatency"],[13,"NumaCopy"],[13,"CudaCopy"],[3,"CudaMemcopy"],[3,"Measurement"],[3,"DataPoint"],[4,"ErrorKind"],[3,"Error"],[13,"CsvError"],[13,"CudaError"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[13,"IoError"],[13,"Msg"],[13,"NulCharError"],[13,"NumaGpuError"],[13,"NvmlError"],[13,"RuntimeError"],[4,"ItemBytes"],[4,"MemoryOperation"],[4,"Benchmark"],[4,"TileSize"],[3,"MemoryBandwidth"],[3,"CpuMeasurement"],[3,"CpuMemoryBandwidth"],[3,"DataPoint"],[3,"GpuMeasurementParameters"],[3,"GpuMeasurement"],[3,"GpuMemoryBandwidth"],[3,"MemoryLatency"],[3,"DataPoint"],[3,"Measurement"],[3,"GpuMemoryLatency"],[3,"CpuMemoryLatency"],[3,"MeasurementParameters"],[3,"NumaMemcopy"],[3,"DataPoint"],[3,"TlbLatency"],[3,"DataPoint"],[3,"GpuTlbLatency"],[3,"Cycles"],[3,"Grid"],[3,"Block"],[3,"ThreadCount"],[4,"BareMemType"],[3,"MemTypeDescription"]]},\
"numa_gpu":{"doc":"","t":[0,0,0,12,13,3,4,13,13,13,13,13,13,13,13,6,8,13,8,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,13,13,3,13,4,13,13,13,13,13,6,4,13,13,13,13,6,6,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,3,3,3,8,8,16,16,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,13,13,13,13,13,13,3,4,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,5,5,11,11,11,11,5,5,5,11,5,11,12,11,11,11,11,11,11,3,3,3,8,16,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,8,3,11,11,10,10,10,5,11,11,11,11,11,11,11,11,10,10,10,10,10,11,10,11,11,11,11,18,3,18,18,18,18,18,18,18,18,18,3,3,8,3,18,3,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,16,8,3,3,3,3,4,8,4,13,13,13,8,13,13,13,10,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,13,13,13,13,3,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,3,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5],"n":["error","runtime","utils","0","Cuda","Error","ErrorKind","IntegerOverflow","InvalidArgument","InvalidConversion","Io","LogicError","Msg","ProcFs","RayonThreadPoolBuild","Result","ResultExt","RuntimeError","ToResult","backtrace","backtrace","borrow","borrow","borrow_mut","borrow_mut","chain_err","chain_err","chain_err","deref","deref","deref_mut","deref_mut","description","description","description","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_kind","from_kind","init","init","into","into","iter","iter","kind","kind","source","to_result","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_boxed_chain","with_chain","with_chain","0","0","0","0","0","0","0","0","0","0","allocator","cpu_affinity","cuda","cuda_wrapper","dispatcher","hw_info","linux_wrapper","memory","numa","nvml","nvtx","AlignedSysMem","AlignedSysMem","Allocator","CacheAndSpill","CacheSpillType","CudaDevMem","CudaPinnedMem","CudaPinnedMem","CudaUniMem","CudaUniMem","DerefMemAllocFn","DerefMemType","DistributedNumaMem","DistributedNumaMem","DistributedNumaMemWithLen","DistributedNumaMemWithLen","MemAllocFn","MemSpillAllocFn","MemType","NoSpill","NumaMem","NumaMem","NumaPinnedMem","NumaPinnedMem","SysMem","SysMem","alloc_deref_mem","alloc_mem","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mem_alloc_fn","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","into","into","into","into","mem_alloc_fn","mem_spill_alloc_fn","ne","ne","ne","page_type","page_type","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","cache_node","page_type","spill_node","align_bytes","node","node","nodes","nodes","page_type","page_type","page_type","page_type","align_bytes","node","node","nodes","nodes","page_type","page_type","page_type","page_type","CpuAffinity","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","from","from_file","from_slice","get_cpu","init","into","len","set_affinity","thread_to_cpu","to_owned","try_from","try_into","type_id","Coherence","CudaIterator2","CudaTransferStrategy","CudaTransferStrategyMeasurement","CudaUnifiedIterator2","EventTimer","IntoCudaIterator","IntoCudaIteratorWithStrategy","Iter","Iter","LazyPinnedCopy","PageableCopy","PinnedCopy","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_ns","cool_down_ns","copy_ns","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fold","fold","fold_async","fold_par","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_cuda_iter","into_cuda_iter_with_strategy","record_start","record_stop","synchronize_and_time","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","warm_up_ns","CPU_DEVICE_ID","CU_MEM_ADVISE_SET_ACCESSED_BY","CU_MEM_ADVISE_SET_PREFERRED_LOCATION","CU_MEM_ADVISE_SET_READ_MOSTLY","CU_MEM_ADVISE_UNSET_ACCESSED_BY","CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION","CU_MEM_ADVISE_UNSET_READ_MOSTLY","CudaMemInfo","MemAdviseFlags","async_copy","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","current_device_id","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","free","from","from","hash","host_register","host_unregister","init","init","into","into","mem_advise","mem_info","memset_async","partial_cmp","prefetch_async","to_owned","total","try_from","try_from","try_into","try_into","type_id","type_id","HetMorselExecutor","HetMorselExecutorBuilder","HetMorselIterator2","IntoHetMorselIterator","Iter","MorselSpec","StatefulHetMorselIterator2","WorkerCpuAffinity","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","cpu_morsel_bytes","cpu_threads","cpu_workers","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","fold","fold","from","from","from","from","from","from","gpu_ids","gpu_morsel_bytes","gpu_workers","init","init","init","init","init","init","into","into","into","into","into","into","into_het_morsel_iter","morsel_spec","new","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_state","worker_cpu_affinity","CudaDeviceInfo","L1D_size","L2_size","L3_size","NvidiaDriverInfo","ProcessorCache","borrow","borrow_mut","clock_rate","concurrent_managed_access","cores","cpu_codename","deref","deref_mut","drop","fmt","from","huge_page_size","init","into","is_numa_mem_online","memory_clock_rate","numa_mem_size","numa_memory_affinity","numa_node","page_size","sm_cores","to_string","try_from","try_into","type_id","BIND","CpuSet","DEFAULT","DEFAULT","EXEC","GROWSDOWN","GROWSUP","INTERLEAVE","LOCAL","MOVE","MOVE_ALL","MemBindFlags","MemPolicyModes","MemProtect","MemProtectFlags","NONE","NumaMemInfo","PREFERRED","READ","RELATIVE_NODES","STATIC_NODES","STRICT","WRITE","add","all","all","all","as_mut_slice","as_slice","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","contains","contains","count","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","empty","empty","empty","eq","eq","eq","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","hash","hash","hash","hash","init","init","init","init","init","insert","insert","insert","intersects","intersects","intersects","into","into","into","into","into","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_set","max_id","mbind","mprotect","ne","ne","ne","ne","new","not","not","not","numa_mem_info","numa_node_of_cpu","numa_run_on_node","numa_set_preferred","numa_set_strict","numa_tonode_memory","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","set","set","set","sub","sub","sub","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","total","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","used","zero","BoxedSysMem","BoxedSysMem","BoxedSysMem","CudaDevMem","CudaDevMem","CudaPinnedMem","CudaPinnedMem","CudaPinnedMem","CudaUniMem","CudaUniMem","CudaUniMem","DerefMem","DistributedNumaMem","DistributedNumaMem","DistributedNumaMem","Item","LaunchableMem","LaunchableMutPtr","LaunchableMutSlice","LaunchablePtr","LaunchableSlice","Mem","MemLock","MemType","NumaMem","NumaMem","NumaMem","PageLock","SysMem","SysMem","SysMem","as_launchable_mut_ptr","as_launchable_mut_ptr","as_launchable_mut_ptr","as_launchable_mut_ptr","as_launchable_mut_slice","as_launchable_mut_slice","as_launchable_mut_slice","as_launchable_ptr","as_launchable_ptr","as_launchable_ptr","as_launchable_ptr","as_launchable_ptr","as_launchable_slice","as_launchable_slice","as_launchable_slice","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ptr","as_ptr","as_slice","as_slice","as_slice","as_void","as_void","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","copy_from_mem","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","init","init","init","init","init","init","init","into","into","into","into","into","into","into","len","len","len","mem_type","mem_type","mlock","mlock","mlock","mprotect","mprotect","munlock","munlock","munlock","ne","ne","null","null_mut","offset","offset","page_lock","page_unlock","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","Default","DistributedNumaMemory","Huge16GB","Huge16MB","Huge1GB","Huge2MB","NodeLen","NodeRatio","NumaMemory","PageType","Small","TransparentHuge","as_mut_slice","as_mut_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","len","mlock","mlock","mprotect","mprotect","munlock","munlock","ne","ne","new","new_with_len","new_with_ratio","node","node","node","node_ratios","page_lock","page_lock","page_unlock","page_unlock","ratio","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","DeviceClocks","NvmlDeviceExtra","ThrottleReasons","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from","init","into","numa_mem_affinity","set_default_gpu_clocks","set_max_gpu_clocks","to_string","try_from","try_into","type_id","Range","RangeId","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","end","eq","fmt","fmt","fmt","from","from","id","init","init","into","into","mark","ne","new","pop","push","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CachePadded","Cpu","DeviceType","Gpu","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cpu","cpu_or_else","default","deref","deref","deref_mut","deref_mut","drop","drop","either","eq","eq","fmt","fmt","from","from","gpu","gpu_or_else","gpu_utils","hash","init","init","into","into","is_cpu","is_gpu","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","0","0","noop"],"q":["numa_gpu","","","numa_gpu::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::error::ErrorKind","","","","","","","","","","numa_gpu::runtime","","","","","","","","","","","numa_gpu::runtime::allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::allocator::CacheSpillType","","","","numa_gpu::runtime::allocator::DerefMemType","","","","","","","","","numa_gpu::runtime::allocator::MemType","","","","","","","","","numa_gpu::runtime::cpu_affinity","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::cuda","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::cuda_wrapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::dispatcher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::hw_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::linux_wrappernuma_gpu::runtime::memorynuma_gpu::runtime::memory::DerefMem","","","","","","numa_gpu::runtime::memory::Mem","","","","","","","numa_gpu::runtime::numa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::nvml","","","","","","","","","","","","","","","","","","","","numa_gpu::runtime::nvtx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numa_gpu::utils::DeviceType","","numa_gpu::utils::gpu_utils"],"d":["","","","The kind of the error.","","The Error type.","The kind of an error.","","","","","","A convenient variant for String.","","","Convenient wrapper around <code>std::Result</code>.","Additional methods for <code>Result</code>, for easy interaction with …","","Converts raw C CUresult into Rust-ified Result type","","Returns the backtrace associated with this error.","","","","","If the <code>Result</code> is an <code>Err</code> then <code>chain_err</code> evaluates the …","","Extends the error chain with a new entry.","","","","","","A short description of the error. This method is identical …","A string describing the error kind.","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","Constructs an error from a kind, and generates a backtrace.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Iterates over the error chain.","","Returns the kind of the error.","","","","","","","","","","","Construct a chained error from another boxed error and a …","","Constructs a chained error from another error and a kind, …","","","","","","","","","","","Heterogeneous memory allocator.","Set the CPU core affinity of a thread.","CUDA runtime for data transfer and kernel execution.","Collection of Rust-ified wrappers for commonly-used CUDA …","","","","","Rust bindings to Linux’s ‘numa’ library.","","Rust-ified wrapper of NVIDIA Tools Extension (NVTX) …","Aligned system memory allocated with Rust’s global …","Aligned system memory allocated with Rust’s global …","Heterogeneous memory allocator.","","","CUDA device memory","CUDA pinned memory (using cudaHostAlloc())","CUDA pinned memory (using cudaHostAlloc())","CUDA unified memory","CUDA unified memory","Generic memory allocator for DerefMem that hides concrete …","Dereferencable memory type specifier","NUMA memory distributed in proportion to a ratio over …","NUMA memory distributed in proportion to a ratio over …","NUMA memory distributed over multiple NUMA nodes using a …","NUMA memory distributed over multiple NUMA nodes using a …","Generic memory allocator for Mem that hides concrete …","A curried memory allocator for caching and spilling memory","Memory type specifier","","NUMA memory allocated on the specified NUMA node and with …","NUMA memory allocated on the specified NUMA node and with …","NUMA memory allocated on the specified NUMA node and …","NUMA memory allocated on the specified NUMA node, with the …","System memory allocated with Rust’s global allocator","System memory allocated with Rust’s global allocator","Allocates host-dereferencable memory of the specified type","Allocates memory of the specified type","","","","","","","","","","","","","","","","","","","Returns a generic ‘DerefMem’ memory allocator that …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a generic ‘Mem’ memory allocator that …","Captures the cache memory type and returns a function that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Reads a list of CPU core affinities from a file.","Takes a slice containing CPU core affinities.","Returns the CPU core ID that the calling thread is …","","Calls <code>U::from(self)</code>.","Returns the number of CPU core IDs currently stored in the …","Binds the current thread to the CPU core by the given …","Maps a thread ID to a CPU core ID.","","","","","Access the memory in-place without any copies.","CUDA iterator for two mutable inputs.","Specify the CUDA transfer strategy.","Timings of the <code>CudaTransferStrategy</code> phases","CUDA iterator for two mutable unified memory inputs.","Timer based on CUDA events.","Conversion into a CUDA iterator.","Conversion into a CUDA iterator with a specified transfer …","The type of the iterator to produce.","The type of the iterator to produce.","Pin the memory in-place and the copy.","Copy directly from pageable memory.","Copy using an intermediate, pinned buffer.","","","","","","","","","","","","","Compute phase (i.e., kernel execution) in nanoseconds","Cool down phase in nanoseconds","Copy phase in nanoseconds","","","","","","","","","","","","","","","","","","","","Apply a GPU function that produces a single, final value.","Apply a GPU function that produces a single, final value.","An asynchronous implementation of <code>fold()</code>.","A parallel implementation of <code>fold()</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a value.","Creates an iterator from a value.","Starts recording time.","Stops recording time.","Waits for the timer to finish and returns the duration in …","","","","","","","","","","","","","","","","","Warm up phase in nanoseconds","","","","","","","","CUDA memory information","","Copy a slice using CUDA’s memcpyAsync function.","","","","","","","","","","","","","","","","","Free bytes","Returns the argument unchanged.","Returns the argument unchanged.","","Page-lock an existing memory range for efficient GPU …","Unregisters a memory range that was page-locked with …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Advise how the memory range will be used.","Returns the free and total device memory in bytes","Fill a launchable slice using the CUDA <code>memset_async</code> …","","Prefetch memory to the device specified in the current …","","Total bytes","","","","","","","","","","","The type of the iterator to produce.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","Extends Rustacuda’s Device with methods that provide …","","","","Extends Rustacuda’s Device with hardware information …","","","","Returns the default clock rate of the streaming …","Returns <code>true</code> if concurrent managed access is supported by …","Returns the total number of cores that are in the device","Returns the codename of the current CPU.","","","","","Returns the argument unchanged.","Returns the transparent huge page size","","Calls <code>U::from(self)</code>.","Returns if the GPU memory is online as a NUMA node","Returns the default memory clock rate of the GPU in …","Returns the NUMA memory size in bytes as seen by the Linux …","Returns the NUMA node of the CPU socket associated with …","Returns the NUMA node associated with this GPU device","","Returns the number of cores per streaming multiprocessor","","","","","Specifies a strict policy that restricts memory allocation …","CPU set to create CPU and NUMA node masks.","Default","Restores default behavior by removing any previously …","","","","Specifies that page allocations should be interleaved over …","Specifies that pages should be allocated locally on the …","Move pages owned by this process to conform to mapping","Move every page to conform to mapping","Flags for <code>mbind</code>","Memory policies","Defines the <code>mprotect</code> system call for the type","","","NUMA node memory information","Specifies that pages should first try to be allocated on a …","","Speficies that the nodes should be interpreted relative to …","Specifies that the nodes should be interpreted as physical …","Verify existing pages in the mapping","","Add an ID to the set.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Get the set as a mutable slice.","Get the set as a slice.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the size of the set in bytes.","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Returns the number of IDs in the set.","","","","","","","","","","","","","","","","","Returns an empty set of flags","Returns an empty set of flags","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","Free bytes","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Query if an ID is included in the set.","Query the maximum possible number of IDs currently in the …","","Sets the protection flags of a memory region","","","","","Create an empty CPU set.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the memory information of a NUMA node","Find the NUMA node that the CPU core belongs to.","Run the current thread on the specified NUMA node.","Try to allocate memory on the sepecified NUMA node.","NUMA allocations will fail if the memory cannot be …","Put memory on a specific node.","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Remove an ID from the set.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Total bytes","","","","","","","","","","","","","","","","Used bytes","Reset the set to zero.","","System memory allocated with Rust’s global allocator but …","System memory allocated with Rust’s global allocator but …","","CUDA unified memory","","CUDA pinned memory (using cudaHostAlloc())","CUDA pinned memory (using cudaHostAlloc())","","CUDA device memory","CUDA unified memory","A CPU-dereferencable memory type","","NUMA memory distributed over multiple NUMA nodes","NUMA memory distributed over multiple NUMA nodes","The type of elements stored in the memory range.","GPU-accessible memory.","A pointer to mutable memory that can be dereferenced on …","A slice of mutable memory that can be dereferenced on the …","A pointer to immutable memory that can be dereferenced on …","A slice of immutable memory that can be dereferenced on …","","A trait for locking pages in memory","A <code>MemType</code> represents the memory type of <code>Mem</code>","","NUMA memory allocated on the specified NUMA node","NUMA memory allocated on the specified NUMA node","A trait for memory that can be page-locked by CUDA.","","System memory allocated with Rust’s global allocator","System memory allocated with Rust’s global allocator","Returns a launchable mutable pointer to the beginning of …","","","Returns a launchable pointer to the beginning of the slice.","Returns a launchable mutable slice to the entire memory …","","","Returns a launchable pointer to the beginning of the …","","","Returns a launchable pointer to the beginning of the slice.","Returns a launchable pointer to the beginning of the slice.","Returns a launchable slice to the entire memory range.","","","","","","Returns a regular mutable <code>slice</code>.","","","","","Returns a regular <code>slice</code>.","Returns a regular <code>slice</code>.","Cast internal pointer to void pointer.","Cast internal pointer to void pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the length of the slice.","Returns the length of the slice.","","","Lock memory","","","","","Unlock memory","","","","","Creates a null launchable pointer.","Creates a null launchable mutable pointer.","Calculates the offset from a pointer","Calculates the offset from a pointer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default page type","A contiguous memory region that is dynamically allocated …","16 GiB huge pages","16 MiB huge pages","1 GiB huge pages","2 MiB huge pages","Specifies the requested memory allocation size on the NUMA …","Specifies the ratio of total memory allocated on the NUMA …","A contiguous memory region that is dynamically allocated …","Specifies the allocation page type","Small pages","Transparent huge pages","Extracts a mutable slice of the entire memory region.","Extracts a mutable slice of the entire memory region.","Extracts a slice of the entire memory region.","Extracts a slice of the entire memory region.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The allocation size in bytes","","","","","","","","","Allocates a new memory region with the specified capacity …","Allocates a new memory region.","Allocates a new memory region.","Returns the NUMA node that the memory region is allocated …","The NUMA node","The NUMA node","Returns the NUMA nodes that the memory region is allocated …","","","","","A ratio smaller or equal than 1","","","","","","","","","","","","","","","","","","","","Extra features for GPU devices with NVML","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the NUMA memory affinity of the GPU device","","","","","","","A range denoting a time span.","A range identifier.","","","","","","","","","","","","","End a process range.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get the ID of a range.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set a marker.","","Start a process range.","Stop a nested range.","Start a new nested process range.","","","","","","","","","","Cache pad a value to avoid false sharing between threads.","CPU device type","A device type specifier","GPU device type","","","","","","","","","Returns <code>Some(T)</code> if device is a CPU or otherwise <code>None</code>","Returns the contained <code>T</code> for a CPU, or computes it from the …","","","","","","","","Maps the contained <code>T</code> or <code>U</code> into the same <code>M</code> type using the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>Some(U)</code> if device is a GPU or otherwise <code>None</code>","Returns the contained <code>U</code> for a GPU, or computes it from the …","Helper utilities for the GPU.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the device is a CPU","Returns <code>true</code> if the device is a GPU","","","","","","","","","","","","","","Launches an empty GPU kernel that does nothing."],"i":[0,0,0,1,2,0,0,2,2,2,2,2,2,2,2,0,0,2,0,1,1,1,2,1,2,3,1,1,1,2,1,2,1,1,2,1,2,1,1,2,2,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,2,1,2,1,1,1,1,1,4,1,2,1,2,1,2,1,2,1,1,1,5,6,7,8,9,10,11,12,13,14,0,0,0,0,0,0,0,0,0,0,0,15,16,0,17,0,15,15,16,15,16,0,0,15,16,15,16,0,0,0,17,15,16,15,16,15,16,18,18,18,15,16,17,18,15,16,17,15,16,17,15,16,17,18,15,16,17,18,18,15,16,17,18,15,16,17,15,16,17,15,16,17,18,15,15,16,17,17,18,15,16,17,18,15,16,17,18,18,15,16,17,15,16,15,16,17,18,15,16,16,17,18,15,16,17,18,15,16,17,19,20,20,20,21,22,23,24,25,22,23,24,25,26,27,28,29,30,27,28,29,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,0,0,0,0,0,0,0,33,34,32,32,32,35,36,32,37,38,35,36,32,37,38,32,32,37,37,37,37,35,36,32,37,38,35,36,32,37,38,35,36,32,37,38,32,37,38,36,38,36,36,35,36,32,37,38,35,36,32,37,38,35,36,32,37,38,33,34,35,35,35,32,35,36,32,37,38,35,36,32,37,38,35,36,32,37,38,37,0,39,39,39,39,39,39,0,0,0,40,39,40,39,39,39,39,0,40,39,40,39,40,39,39,39,40,40,39,39,0,0,40,39,40,39,0,0,0,39,0,39,40,40,39,40,39,40,39,0,0,0,0,41,0,0,0,42,43,44,45,46,47,42,43,44,45,46,47,43,46,47,46,47,46,43,47,47,42,43,44,45,46,47,42,43,44,45,46,47,42,43,44,45,45,46,47,44,45,42,43,44,45,46,47,43,46,47,42,43,44,45,46,47,42,43,44,45,46,47,41,43,43,46,47,42,43,44,45,46,47,42,43,44,45,46,47,42,43,44,45,46,47,44,43,0,48,48,48,0,0,48,48,49,49,49,0,48,48,48,48,48,48,48,48,50,49,50,50,50,48,49,48,48,48,48,51,0,52,51,53,53,53,51,51,52,52,0,0,0,0,53,0,51,53,51,51,52,53,54,52,51,53,54,54,52,51,53,54,52,51,53,52,51,53,54,52,51,53,52,51,53,52,51,53,54,52,51,53,55,52,51,53,54,55,52,51,53,54,54,52,51,53,54,52,51,53,54,52,51,53,52,51,53,54,54,55,52,51,53,54,55,52,51,53,54,55,52,51,53,54,52,51,53,52,51,53,54,52,51,53,52,52,52,52,52,51,51,51,51,51,53,53,53,53,53,54,55,55,52,51,53,54,52,51,53,52,51,53,52,51,53,52,51,53,52,51,53,54,55,52,51,53,54,52,51,53,52,51,53,55,52,51,53,54,52,51,53,52,51,53,54,54,0,56,52,51,53,54,54,52,51,53,0,0,0,0,0,0,52,51,53,52,51,53,54,52,51,53,52,51,53,52,51,53,52,51,53,54,52,51,53,55,55,52,51,53,54,55,52,51,53,54,55,52,51,53,54,55,54,57,58,59,57,58,57,58,59,57,58,59,0,57,58,59,60,0,0,0,0,0,0,0,0,57,58,59,0,57,58,59,60,58,59,61,60,58,59,60,58,59,62,61,60,58,59,58,61,59,61,58,62,61,59,62,61,63,64,57,58,59,63,64,62,61,57,58,59,63,64,62,61,57,63,64,57,63,64,58,57,58,59,59,63,64,62,61,57,58,59,59,63,64,62,61,57,58,59,63,64,62,61,57,63,64,57,58,59,63,64,62,61,57,58,58,59,63,63,63,64,64,64,62,61,63,64,57,58,59,63,64,62,61,57,58,59,63,64,62,61,58,62,61,58,59,65,58,59,58,59,65,58,59,63,64,63,64,63,64,66,66,57,63,64,57,58,59,59,63,64,62,61,57,58,59,63,64,62,61,57,58,59,63,64,62,61,67,68,69,70,71,72,73,74,75,76,77,78,79,80,0,80,80,80,80,0,0,0,0,80,80,81,82,81,82,80,81,83,84,82,80,81,83,84,82,80,83,84,80,83,84,80,81,81,83,84,82,82,80,81,81,83,84,82,82,80,81,81,83,84,82,82,80,83,84,80,81,83,84,82,80,81,83,84,82,80,81,83,84,82,80,81,83,84,82,84,81,82,81,82,81,82,83,84,81,82,82,81,83,84,82,81,82,81,82,83,80,83,84,80,81,83,84,82,80,81,83,84,82,80,81,83,84,82,0,0,0,85,85,85,85,85,85,85,85,85,85,86,87,87,85,85,85,85,0,0,88,89,88,89,89,89,88,89,88,89,88,89,88,89,88,89,89,88,89,88,88,89,88,89,0,89,88,88,88,89,89,89,88,89,88,89,88,89,0,90,0,90,91,90,91,90,91,90,91,90,90,90,91,91,90,91,90,91,90,90,91,90,91,90,91,90,90,90,0,91,91,90,91,90,90,90,91,90,91,90,91,90,91,90,91,90,91,92,93,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4,[["error",3]]]],[[]],[[],["error",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["cudaerror",4]]],[[["threadpoolbuilderror",3]]],[[["procerror",4]]],[[["errorkind",4]]],[[]],[[["error",3]]],[[["str",0]]],[[["string",3]]],[[["error",3]]],[[["string",3]]],[[]],[[["str",0]]],[[]],[[["errorkind",4]],["error",3]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["iter",3]],[[["",0]],["iter",3]],[[["",0]]],[[["",0]],["errorkind",4]],[[["",0]],["option",4,[["error",8]]]],[[],["result",6]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["box",3,[["error",8]]]],["error",3]],[[]],[[],["error",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["derefmemtype",4],["usize",0]],["derefmem",4,[["",26,[["clone",8],["default",8],["devicecopy",8]]]]]],[[["memtype",4],["usize",0]],["mem",4,[["",26,[["clone",8],["default",8],["devicecopy",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memtype",4]],[[["",0]],["derefmemtype",4]],[[["",0]],["cachespilltype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["derefmemtype",4]],["derefmemallocfn",6,[["",26,[["clone",8],["default",8],["devicecopy",8]]]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["memtype",4]],["bool",0]],[[["",0],["derefmemtype",4]],["bool",0]],[[["",0],["cachespilltype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["derefmemtype",4]]],[[]],[[]],[[]],[[["memtype",4]],["cachespilltype",4]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["memtype",4]],["memallocfn",6,[["",26,[["clone",8],["default",8],["devicecopy",8]]]]]],[[["cachespilltype",4]]],[[["",0],["memtype",4]],["bool",0]],[[["",0],["derefmemtype",4]],["bool",0]],[[["",0],["cachespilltype",4]],["bool",0]],[[["",0]],["pagetype",4]],[[["",0]],["pagetype",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["memtype",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cpuaffinity",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[["path",3]],["result",6]],[[]],[[],["result",6,[["u16",0]]]],[[],["usize",0]],[[]],[[["",0]],["usize",0]],[[["",0],["u16",0]],["result",6]],[[["",0],["u16",0]],["option",4,[["u16",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cudatransferstrategy",4]],[[["",0],["",0]]],null,null,null,[[],["cudatransferstrategymeasurement",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["result",6,[["cudatransferstrategymeasurement",3]]]],[[["",0]],["result",6,[["cudatransferstrategymeasurement",3]]]],[[["",0]],["result",6,[["cudatransferstrategymeasurement",3]]]],[[["",0]],["result",6,[["cudatransferstrategymeasurement",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["usize",0]],["result",6]],[[["",0],["cudatransferstrategy",4],["usize",0],["usize",0],["cpuaffinity",3]],["result",6]],[[["stream",3]],["cudaresult",6]],[[["",0],["stream",3]],["cudaresult",6]],[[["",0]],["cudaresult",6,[["f32",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["stream",3]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cumem_advise_enum",4]],[[["",0],["",0]]],[[["",0],["cumem_advise_enum",4]],["ordering",4]],[[],["result",6,[["cudevice",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["cumem_advise_enum",4]],["bool",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[["",0],["",0]]],[[],["result",6]],[[],["result",6]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["unifiedpointer",3,[["devicecopy",8]]],["usize",0],["memadviseflags",4],["cudevice",6]],["result",6]],[[],["result",6,[["cudameminfo",3]]]],[[["launchablemutslice",3,[["devicecopy",8]]],["i32",0],["stream",3]],["result",6]],[[["",0],["cumem_advise_enum",4]],["option",4,[["ordering",4]]]],[[["unifiedpointer",3,[["devicecopy",8]]],["usize",0],["cudevice",6],["stream",3]],["result",6]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",6,[["hetmorselexecutor",3]]]],[[["",0]],["morselspec",3]],[[["",0]],["workercpuaffinity",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["usize",0]]],null,[[],["workercpuaffinity",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["u16",0]]]]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["hetmorselexecutor",3]]],[[["morselspec",3]]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6,[["statefulhetmorseliterator2",3]]]],[[["workercpuaffinity",3]]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[],["result",6,[["string",3]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",6,[["usize",0]]]],[[],["usize",0]],[[]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",6,[["u16",0]]]],[[["",0]],["result",6,[["u16",0]]]],[[],["usize",0]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["u16",0]]],[[],["membindflags",3]],[[],["mempolicymodes",3]],[[],["memprotectflags",3]],[[["",0]]],[[["",0]]],[[["membindflags",3]],["membindflags",3]],[[["mempolicymodes",3]],["mempolicymodes",3]],[[["memprotectflags",3]],["memprotectflags",3]],[[]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["membindflags",3]],["membindflags",3]],[[["mempolicymodes",3]],["mempolicymodes",3]],[[["memprotectflags",3]],["memprotectflags",3]],[[]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["",0]],["c_uint",6]],[[["",0]],["c_int",6]],[[["",0]],["c_int",6]],[[["membindflags",3]],["membindflags",3]],[[["mempolicymodes",3]],["mempolicymodes",3]],[[["memprotectflags",3]],["memprotectflags",3]],[[]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["membindflags",3]],[[["",0]],["mempolicymodes",3]],[[["",0]],["memprotectflags",3]],[[["",0]],["cpuset",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["membindflags",3]],["ordering",4]],[[["",0],["mempolicymodes",3]],["ordering",4]],[[["",0],["memprotectflags",3]],["ordering",4]],[[["",0],["membindflags",3]],["bool",0]],[[["",0],["mempolicymodes",3]],["bool",0]],[[["",0],["memprotectflags",3]],["bool",0]],[[["",0]],["usize",0]],[[],["cpuset",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["membindflags",3]],[[],["mempolicymodes",3]],[[],["memprotectflags",3]],[[["",0],["membindflags",3]],["bool",0]],[[["",0],["mempolicymodes",3]],["bool",0]],[[["",0],["memprotectflags",3]],["bool",0]],[[["",0],["cpuset",3]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[["c_uint",6]],["option",4,[["membindflags",3]]]],[[["c_int",6]],["option",4,[["mempolicymodes",3]]]],[[["c_int",6]],["option",4,[["memprotectflags",3]]]],[[["c_uint",6]],["membindflags",3]],[[["c_int",6]],["mempolicymodes",3]],[[["c_int",6]],["memprotectflags",3]],[[["c_uint",6]],["membindflags",3]],[[["c_int",6]],["mempolicymodes",3]],[[["c_int",6]],["memprotectflags",3]],[[["intoiterator",8]],["membindflags",3]],[[["intoiterator",8]],["mempolicymodes",3]],[[["intoiterator",8]],["memprotectflags",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["",0],["membindflags",3]],["bool",0]],[[["",0],["mempolicymodes",3]],["bool",0]],[[["",0],["memprotectflags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["u16",0]],["bool",0]],[[["",0]],["u16",0]],[[["mempolicymodes",3],["cpuset",3],["membindflags",3]],["result",6]],[[["",0],["memprotectflags",3]],["result",6]],[[["",0],["membindflags",3]],["bool",0]],[[["",0],["mempolicymodes",3]],["bool",0]],[[["",0],["memprotectflags",3]],["bool",0]],[[["",0],["cpuset",3]],["bool",0]],[[]],[[],["membindflags",3]],[[],["mempolicymodes",3]],[[],["memprotectflags",3]],[[["u16",0]],["result",6,[["numameminfo",3]]]],[[["u16",0]],["result",6,[["u16",0]]]],[[["u16",0]],["result",6]],[[["u16",0]]],[[["bool",0]]],[[["u16",0]]],[[["",0],["membindflags",3]],["option",4,[["ordering",4]]]],[[["",0],["mempolicymodes",3]],["option",4,[["ordering",4]]]],[[["",0],["memprotectflags",3]],["option",4,[["ordering",4]]]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["",0],["u16",0]]],[[["",0],["membindflags",3],["bool",0]]],[[["",0],["mempolicymodes",3],["bool",0]]],[[["",0],["memprotectflags",3],["bool",0]]],[[["membindflags",3]],["membindflags",3]],[[["mempolicymodes",3]],["mempolicymodes",3]],[[["memprotectflags",3]],["memprotectflags",3]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["membindflags",3]]],[[["",0],["mempolicymodes",3]]],[[["",0],["memprotectflags",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["launchablemutptr",3]],[[["",0]],["launchablemutptr",3]],[[["",0]],["launchablemutptr",3]],[[["",0]],["launchablemutptr",3]],[[["",0]],["launchablemutslice",3]],[[["",0]],["launchablemutslice",3]],[[["",0]],["launchablemutslice",3]],[[["",0]],["launchableptr",3]],[[["",0]],["launchableptr",3]],[[["",0]],["launchableptr",3]],[[["",0]],["launchableptr",3]],[[["",0]],["launchableptr",3]],[[["",0]],["launchableslice",3]],[[["",0]],["launchableslice",3]],[[["",0]],["launchableslice",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["launchableptr",3,[["c_void",4]]]],[[["",0]],["launchablemutptr",3,[["c_void",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["memtype",4]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]],["result",6]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["memtype",4]],["bool",0]],[[["",0],["launchableptr",3]],["bool",0]],[[["",0],["launchablemutptr",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["derefmem",4]],["mem",4]],[[]],[[]],[[["devicepointer",3]]],[[["unifiedpointer",3]]],[[]],[[["devicepointer",3]]],[[["unifiedpointer",3]]],[[]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["memtype",4]],[[["",0]],["memtype",4]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["memprotectflags",3]],["result",6]],[[["",0],["memprotectflags",3]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["launchableptr",3]],["bool",0]],[[["",0],["launchablemutptr",3]],["bool",0]],[[]],[[]],[[["isize",0]],["launchableptr",3]],[[["isize",0]],["launchablemutptr",3]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["mem",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pagetype",4]],[[["",0]],["noderatio",3]],[[["",0]],["nodelen",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["",0],["pagetype",4]],["bool",0]],[[["",0],["noderatio",3]],["bool",0]],[[["",0],["nodelen",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],null,[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["memprotectflags",3]],["result",6]],[[["",0],["memprotectflags",3]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["noderatio",3]],["bool",0]],[[["",0],["nodelen",3]],["bool",0]],[[["usize",0],["u16",0],["pagetype",4]]],[[["usize",0],["box",3],["pagetype",4]]],[[["usize",0],["box",3],["pagetype",4]]],[[["",0]],["u16",0]],null,null,[[["",0]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["nvmltr",3]]],[[],["usize",0]],[[]],[[["",0]],["result",6,[["u16",0]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rangeid",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[],["rangeid",3]],[[["",0],["rangeid",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["rangeid",3]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["cstr",3]]],[[["",0],["rangeid",3]],["bool",0]],[[["cstr",3]]],[[],["result",6,[["u16",0]]]],[[["cstr",3]],["result",6,[["u16",0]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cachepadded",3]],[[["",0]],["devicetype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["option",4]],[[["fnonce",8]]],[[],["cachepadded",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[["",0],["cachepadded",3]],["bool",0]],[[["",0],["devicetype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["option",4]],[[["fnonce",8]]],null,[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["cachepadded",3]],["bool",0]],[[["",0],["devicetype",4]],["bool",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["stream",3]],["result",6]]],"p":[[3,"Error"],[4,"ErrorKind"],[8,"ResultExt"],[8,"ToResult"],[13,"Cuda"],[13,"Io"],[13,"ProcFs"],[13,"RayonThreadPoolBuild"],[13,"Msg"],[13,"InvalidArgument"],[13,"InvalidConversion"],[13,"IntegerOverflow"],[13,"LogicError"],[13,"RuntimeError"],[4,"MemType"],[4,"DerefMemType"],[4,"CacheSpillType"],[3,"Allocator"],[13,"NoSpill"],[13,"CacheAndSpill"],[13,"AlignedSysMem"],[13,"NumaMem"],[13,"NumaPinnedMem"],[13,"DistributedNumaMem"],[13,"DistributedNumaMemWithLen"],[13,"AlignedSysMem"],[13,"NumaMem"],[13,"NumaPinnedMem"],[13,"DistributedNumaMem"],[13,"DistributedNumaMemWithLen"],[3,"CpuAffinity"],[4,"CudaTransferStrategy"],[8,"IntoCudaIterator"],[8,"IntoCudaIteratorWithStrategy"],[3,"EventTimer"],[3,"CudaIterator2"],[3,"CudaTransferStrategyMeasurement"],[3,"CudaUnifiedIterator2"],[4,"MemAdviseFlags"],[3,"CudaMemInfo"],[8,"IntoHetMorselIterator"],[3,"HetMorselExecutor"],[3,"HetMorselExecutorBuilder"],[3,"HetMorselIterator2"],[3,"StatefulHetMorselIterator2"],[3,"MorselSpec"],[3,"WorkerCpuAffinity"],[3,"ProcessorCache"],[8,"CudaDeviceInfo"],[8,"NvidiaDriverInfo"],[3,"MemPolicyModes"],[3,"MemBindFlags"],[3,"MemProtectFlags"],[3,"CpuSet"],[3,"NumaMemInfo"],[8,"MemProtect"],[4,"MemType"],[4,"Mem"],[4,"DerefMem"],[8,"LaunchableMem"],[3,"LaunchableMutSlice"],[3,"LaunchableSlice"],[3,"LaunchablePtr"],[3,"LaunchableMutPtr"],[8,"MemLock"],[8,"PageLock"],[13,"SysMem"],[13,"BoxedSysMem"],[13,"NumaMem"],[13,"DistributedNumaMem"],[13,"CudaPinnedMem"],[13,"CudaUniMem"],[13,"SysMem"],[13,"BoxedSysMem"],[13,"NumaMem"],[13,"DistributedNumaMem"],[13,"CudaPinnedMem"],[13,"CudaDevMem"],[13,"CudaUniMem"],[4,"PageType"],[3,"NumaMemory"],[3,"DistributedNumaMemory"],[3,"NodeRatio"],[3,"NodeLen"],[3,"ThrottleReasons"],[8,"NvmlDeviceExtra"],[8,"DeviceClocks"],[3,"Range"],[3,"RangeId"],[4,"DeviceType"],[3,"CachePadded"],[13,"Cpu"],[13,"Gpu"]]},\
"radix_join":{"doc":"","t":[0,0,0,0,13,13,13,3,4,13,13,13,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,5,5,5,0,0,3,12,11,11,12,12,12,12,11,11,12,12,11,11,11,12,12,11,12,11,11,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,11,12,11,12,12,3,11,11,12,12,11,11,11,11,11,11,11,11,12,5,12,12,12,12,11,11,11,4,4,4,4,4,4,3,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["error","execution_methods","measurement","types","CsvError","CudaError","DataStoreError","Error","ErrorKind","IntegerOverflow","InvalidArgument","InvalidConversion","IoError","LogicError","NumaGpuError","RayonThreadPoolBuildError","Result","RuntimeError","SqlOpsError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","cpu_partitioned_radix_join","gpu_radix_join","gpu_triton_join","cpu_partitioned_radix_join","gpu_radix_join","gpu_triton_join","data_point","harness","DataPoint","block_size","borrow","borrow_mut","build_bytes","build_tuples","cached_build_tuples","cached_probe_tuples","clone","clone_into","data_distribution","data_set","default","deref","deref_mut","device_codename","dmem_buffer_size","drop","execution_method","fill_from_join_data","fmt","from","grid_size","hashing_scheme","histogram_algorithm","hostname","init","inner_relation_memory_location","into","join_ns","join_selectivity","new","nvtx_run_id","outer_relation_memory_location","page_type","partition_algorithm","partition_algorithm_2nd","partition_ns","partitions_malloc_ns","partitions_memory_location","partitions_memory_type","partitions_proportions","prefix_sum_ns","probe_bytes","probe_tuples","radix_bits_fst","radix_bits_snd","radix_bits_trd","relation_gen_ns","relation_malloc_ns","relation_memory_type","serialize","set_gpu_threads","set_init_time","state_malloc_ns","state_memory_location","state_memory_type","threads","to_owned","try_from","try_into","tuple_bytes","type_id","warm_up","zipf_exponent","RadixJoinPoint","borrow","borrow_mut","cached_build_tuples","cached_probe_tuples","default","deref","deref_mut","drop","fmt","from","init","into","join_ns","measure","partition_ns","partitions_malloc_ns","prefix_sum_ns","state_malloc_ns","try_from","try_into","type_id","ArgDataDistribution","ArgDataSet","ArgExecutionMethod","ArgHashingScheme","ArgHistogramAlgorithm","ArgMemType","ArgMemTypeHelper","ArgPageType","ArgRadixPartitionAlgorithm","ArgTupleBytes","Blanas","Blanas4MB","BucketChaining","Bytes16","Bytes8","CpuChunked","CpuChunkedSimd","CpuNC","CpuPartitionedRadixJoinTwoPass","CpuSWWC","CpuSWWCSIMD","Custom","DataDistribution","Default","Device","DistributedNuma","GpuChunked","GpuContiguous","GpuHSSWWCv4","GpuLASWWC","GpuNC","GpuRadixJoinTwoPass","GpuSSWWCv2","GpuTritonJoinTwoPass","Huge16GB","Huge16MB","Huge1GB","Huge2MB","Kim","LinearProbing","Lutz2Gv32G","Lutz32Gv32G","Numa","NumaPinned","Perfect","Pinned","Small","System","Test","TransparentHuge","Unified","Uniform","Uniform","Zipf","Zipf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","mem_type","ne","node_ratios","page_type","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variants","variants","variants","variants","variants","variants","variants","variants","variants","0"],"q":["radix_join","","","","radix_join::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","radix_join::error::ErrorKind","","","","","","","","","","","","radix_join::execution_methods","","","radix_join::execution_methods::cpu_partitioned_radix_join","radix_join::execution_methods::gpu_radix_join","radix_join::execution_methods::gpu_triton_join","radix_join::measurement","","radix_join::measurement::data_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","radix_join::measurement::harness","","","","","","","","","","","","","","","","","","","","","","radix_join::typesradix_join::types::DataDistribution"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,0,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,17,17,18,19,19,20,20,21,22,21,21,17,0,23,24,24,20,20,21,21,21,22,21,22,23,23,23,23,17,18,17,17,24,24,18,24,23,24,17,23,24,25,26,25,26,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,17,25,26,24,23,20,21,22,18,19,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,17,17,25,25,26,24,24,23,23,20,20,21,21,22,22,18,18,19,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,24,23,20,21,22,18,19,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,20,21,21,22,18,19,27,27,26,27,27,25,24,23,20,21,22,18,19,17,25,26,24,23,20,21,22,18,19,17,25,24,23,20,21,22,18,19,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,26,24,23,20,21,22,18,19,27,17,25,24,23,20,21,22,18,19,28],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["errorkind",4]]],[[["error",3]]],[[["cudaerror",4]]],[[["datastoreerror",3]]],[[["error",3]]],[[]],[[["numagpuerror",3]]],[[["sqlopserror",3]]],[[["threadpoolbuilderror",3]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["joindata",3],["hashingscheme",4],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["radixbits",3],["usize",0],["option",4,[["usize",0]]],["usize",0],["cpuaffinity",3],["memtype",4],["memtype",4],["pagetype",4]],["result",6]],[[["joindata",3],["hashingscheme",4],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["radixbits",3],["usize",0],["option",4,[["usize",0]]],["usize",0],["cpuaffinity",3],["memtype",4],["memtype",4],["pagetype",4]],["result",6]],[[["joindata",3],["hashingscheme",4],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]],["radixbits",3],["usize",0],["option",4,[["usize",0]]],["usize",0],["cpuaffinity",3],["memtype",4],["memtype",4],["pagetype",4]],["result",6]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],null,null,[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,[[["usize",0]]],null,[[["",0],["joindata",3]],["datapoint",3]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,null,null,[[],["usize",0]],null,[[]],null,null,[[],["result",6,[["datapoint",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0],["gridsize",3],["blocksize",3]],["datapoint",3]],[[["",0],["duration",3],["duration",3]],["datapoint",3]],null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[],["radixjoinpoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,[[["str",0],["u32",0],["option",4,[["pathbuf",3]]],["datapoint",3],["box",3,[["fnmut",8]]]],["result",6]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argdataset",4]],[[["",0]],["argdatadistribution",4]],[[["",0]],["datadistribution",4]],[[["",0]],["argmemtype",4]],[[["",0]],["argpagetype",4]],[[["",0]],["arghistogramalgorithm",4]],[[["",0]],["argradixpartitionalgorithm",4]],[[["",0]],["argexecutionmethod",4]],[[["",0]],["arghashingscheme",4]],[[["",0]],["argtuplebytes",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["argdataset",4]],["bool",0]],[[["",0],["argdatadistribution",4]],["bool",0]],[[["",0],["datadistribution",4]],["bool",0]],[[["",0],["argmemtype",4]],["bool",0]],[[["",0],["argpagetype",4]],["bool",0]],[[["",0],["arghistogramalgorithm",4]],["bool",0]],[[["",0],["argradixpartitionalgorithm",4]],["bool",0]],[[["",0],["argexecutionmethod",4]],["bool",0]],[[["",0],["arghashingscheme",4]],["bool",0]],[[["",0],["argtuplebytes",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["devicetype",4,[["cpuhistogramalgorithm",4],["gpuhistogramalgorithm",4]]]],[[],["devicetype",4,[["cpuradixpartitionalgorithm",4],["gpuradixpartitionalgorithm",4]]]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["datadistribution",4]],["bool",0]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null],"p":[[4,"ErrorKind"],[3,"Error"],[13,"CsvError"],[13,"CudaError"],[13,"DataStoreError"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[13,"InvalidConversion"],[13,"IoError"],[13,"LogicError"],[13,"NumaGpuError"],[13,"RuntimeError"],[13,"SqlOpsError"],[13,"RayonThreadPoolBuildError"],[3,"DataPoint"],[3,"RadixJoinPoint"],[4,"ArgDataSet"],[4,"ArgHashingScheme"],[4,"ArgTupleBytes"],[4,"ArgHistogramAlgorithm"],[4,"ArgRadixPartitionAlgorithm"],[4,"ArgExecutionMethod"],[4,"ArgPageType"],[4,"ArgMemType"],[4,"ArgDataDistribution"],[4,"DataDistribution"],[3,"ArgMemTypeHelper"],[13,"Zipf"]]},\
"sql_ops":{"doc":"The SQL Operator Library","t":[17,17,0,0,0,0,13,3,4,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,4,6,13,13,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,3,8,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,8,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,16,3,3,3,3,3,3,3,3,8,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,4,4,8,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,13,13,4,4,8,3,13,13,13,13,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CPU_CACHE_LINE_SIZE","GPU_CACHE_LINE_SIZE","error","join","partition","prefix_scan","CudaError","Error","ErrorKind","IntegerOverflow","InvalidArgument","LikwidError","Msg","NulCharError","NumaGpuError","Result","RuntimeError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","into","into","kind","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","BucketChaining","HashingScheme","HtEntry","LinearProbing","Perfect","borrow","borrow_mut","clone","clone_into","cuda_radix_join","default","deref","deref_mut","drop","fmt","from","init","into","no_partitioning_join","to_owned","try_from","try_into","type_id","CudaRadixJoin","CudaRadixJoinable","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","join","join_impl","new","try_from","try_into","type_id","CpuHashJoin","CpuHashJoinBuilder","CpuHashJoinable","CudaHashJoin","CudaHashJoinBuilder","CudaHashJoinable","HashTable","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build_dim","build_impl","build_impl","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_table","hash_table","hashing_scheme","hashing_scheme","init","init","init","init","init","into","into","into","into","into","is_selective","is_selective","mlock","munlock","new_from_hash_table","new_on_cpu","new_on_gpu","probe_dim","probe_sum","probe_sum","probe_sum_impl","probe_sum_impl","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Chunked","Contiguous","First","HistogramAlgorithmType","Out","PartitionOffsets","PartitionOffsetsChunksMut","PartitionOffsetsMutSlice","PartitionedRelation","PartitionedRelationChunksMut","PartitionedRelationMutSlice","RadixBits","RadixPartitionInputChunk","RadixPartitionInputChunkable","RadixPass","Second","Third","Tuple","as_raw_relation_mut_slice","as_raw_relation_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","canonical_chunk_len","capacity","chunk_id","chunks_mut","chunks_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cpu_radix_partition","data","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","fanout","fanout","fanout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gpu_radix_partition","index","index_mut","init","init","init","init","init","init","init","init","init","init","init","input_chunks","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","key","len","len","mlock","mlock","munlock","munlock","ne","new","new","new","next","next","num_chunks","num_chunks","num_chunks","offsets","padded_len","padding_len","partition_len","partition_len","pass_fanout","pass_ignore_bits","pass_radix_bits","radix_bits","radix_bits","radix_bits","relation","resize","to_owned","to_owned","to_owned","to_owned","to_owned","total_data_len","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","Chunked","ChunkedSimd","CpuHistogramAlgorithm","CpuRadixPartitionAlgorithm","CpuRadixPartitionable","CpuRadixPartitioner","NC","Swwc","SwwcSimd","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","new","partition","partition_impl","prefix_sum","prefix_sum_impl","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Chunked","Contiguous","GpuHistogramAlgorithm","GpuRadixPartitionAlgorithm","GpuRadixPartitionable","GpuRadixPartitioner","HSSWWCv4","LASWWC","NC","SSWWCv2","SSWWCv2G","allocate_partition_state_impl","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","init","into","into","into","new","partition","partition_impl","preallocate_partition_state","prefix_sum","prefix_sum_and_copy_with_payload","prefix_sum_and_copy_with_payload_impl","prefix_sum_and_transform","prefix_sum_and_transform_impl","prefix_sum_impl","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","GpuPrefixScanState","GpuPrefixSum","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","state_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["sql_ops","","","","","","sql_ops::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sql_ops::error::ErrorKind","","","","","","","","sql_ops::join","","","","","","","","","","","","","","","","","","","","","","","sql_ops::join::cuda_radix_join","","","","","","","","","","","","","","","","","sql_ops::join::no_partitioning_join","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sql_ops::partitionsql_ops::partition::cpu_radix_partition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sql_ops::partition::gpu_radix_partition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sql_ops::prefix_scan","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A collection of relational join operators.","A collection of partitioning operators.","A collection of prefix scan operators.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Bucket chaining scheme.","Specifies the hashing scheme using in hash table insert …","A hash table entry in the C/C++ implementation.","Linear probing scheme.","Perfect hashing scheme.","","","","","Radix join operators for GPUs.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Hash join operators for CPUs and GPUs (that don’t …","","","","","GPU radix join implementation in CUDA.","Specifies that the implementing type can be used as a join …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Join two relations and output a set of aggregate values.","","Create a new radix join instance.","","","","CPU hash join implemented in C++.","Build a <code>CpuHashJoin</code>.","Specifies that the implementing type can be used as a join …","GPU hash join implemented in CUDA.","Build a <code>CudaHashJoin</code>.","Specifies that the implementing type can be used as a join …","Hash table for <code>CpuHashJoin</code> and <code>CudaHashJoin</code>.","","","","","","","","","","","Build a hash table on the GPU.","Build a hash table on the CPU.","","","","Implements <code>CudaHashJoin::build</code> for the implementing type.","Implements <code>CpuHashJoin::build</code> for the implementing type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new hash table from another hash table.","Create a new CPU hash table.","Create a new GPU hash table.","","Probe the hash table on the GPU and sum the payload …","Probe the hash table on the CPU and sum the payload …","Implements <code>CudaHashJoin::probe_sum</code> for the implementing …","Implements <code>CpuHashJoin::probe_sum</code> for the implementing …","","","","","","","","","","","","","","","","","","","A class of algorithms that split partitions over multiple …","A class of algorithms that output contiguous partitions.","","Histogram algorithm type","","Partition offsets for an array of chunked partitions.","An iterator that generates <code>PartitionOffsetsMutSlice</code>.","A mutable slice that references the <code>PartitionOffsets</code> of …","A radix-partitioned relation, optionally with padding in …","An iterator that generates <code>PartitionedRelationMutSlice</code>.","A mutable slice that references part of a …","The number of radix bits per pass.","A reference to a chunk of input data.","","A radix pass","","","A key-value tuple.","Returns the internal representation of the relation data …","Returns the internal representation of the relation data …","","","","","","","","","","","","","","","","","","","","","","","Returns the total number of bytes used to store the …","Returns the total number of bytes used to store the …","","Returns the number of elements allocated in memory …","","Returns an iterator over the chunks contained inside the …","Returns an iterator over the chunks contained inside the …","","","","","","","","","","","Radix partition operators for CPU and GPU.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of partitions.","Returns the number of partitions.","Total fanout.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","Splits the input into equally sized chunks.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the total number of elements in the relation …","Returns the total number of elements in the relation …","","","","","","Creates a new partition offsets array.","Creates a new partitioned relation, and automatically …","Returns a new <code>RadixBits</code> object","","","Returs the number of chunks.","Returs the number of chunks.","","","Returns the total number of elements in the relation …","Returns the number of padding elements per partition.","Returns the length of the requested partition.","Returns the length of the requested partition.","Fanout per pass.","Number of radix bits by all earlier passes.","Number of radix bits per pass.","Returns the number of radix bits.","Returns the number of radix bits.","Total number of radix bits.","","Resizes the <code>PartitionedRelation</code> in-place so that <code>len</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Chunked</code> computes a separate set of partitions per thread …","Prefix sum with SIMD optimizations.","Specifies the histogram algorithm that computes the …","Specifies the radix partition algorithm.","Specifies that the implementing type can be used as …","A CPU radix partitioner that provides partitioning …","Non-caching radix partition.","Radix partition with software write-combining.","Radix partition with software write-combining and SIMD …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new CPU radix partitioner.","Radix-partitions a relation by its key attribute.","","Computes the prefix sum.","","","","","","","","","","","","","Chunked partitions, that are computed on the GPU.","Contiguous partitions, that are computed on the GPU.","Specifies the histogram algorithm that computes the …","Specifies the radix partition algorithm.","","","Radix partitioning with hierarchical shared software write …","Radix partitioning with look-ahead software write …","Non-caching radix partition.","Radix partitioning with shared software write combining, …","Radix partitioning with shared software write combining, …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new CPU radix partitioner.","Radix-partitions a relation by its key attribute.","","Preallocates the internal state of <code>partition</code>","Computes the prefix sum.","Computes the prefix sum on a partitioned relation, and …","","Computes the prefix sum on a partitioned relation, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,1,1,2,2,2,2,2,1,2,1,2,2,1,2,1,2,1,2,1,2,3,4,5,6,7,8,9,10,11,0,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,0,0,0,0,0,0,0,14,15,16,17,18,14,15,16,17,18,14,15,17,18,17,19,20,17,18,17,18,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,16,17,18,14,15,16,17,18,17,18,17,18,14,15,16,17,18,14,15,16,17,18,17,18,16,16,16,16,16,17,14,15,19,20,17,18,16,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,21,21,22,0,23,0,0,0,0,0,0,0,0,0,0,22,22,0,24,24,25,26,27,28,24,29,30,21,22,31,32,25,26,27,28,24,29,30,21,22,31,32,26,24,25,24,25,26,24,25,21,22,31,32,25,21,22,31,32,0,25,32,25,26,27,28,24,29,30,21,22,31,32,25,26,27,28,24,29,30,21,22,31,32,25,26,27,28,24,29,30,21,22,31,32,22,32,26,24,31,25,26,27,28,24,29,30,21,22,31,32,25,26,27,28,24,29,30,21,21,21,22,31,31,32,0,24,24,25,26,27,28,24,29,30,21,22,31,32,23,25,26,27,28,24,29,30,21,22,31,32,27,29,32,26,24,26,24,26,24,32,26,24,31,27,29,26,24,25,24,24,24,26,24,31,31,31,26,24,31,24,24,25,21,22,31,32,25,25,26,27,28,24,29,30,21,22,31,31,32,25,26,27,28,24,29,30,21,22,31,32,25,26,27,28,24,29,30,21,22,31,32,32,33,33,0,0,0,0,34,34,34,33,34,35,33,34,35,33,34,33,34,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,33,34,35,35,35,36,35,36,33,34,33,34,35,33,34,35,33,34,35,37,37,0,0,0,0,38,38,38,38,38,39,37,38,40,37,38,40,37,38,37,38,37,38,40,37,38,40,37,38,40,37,38,40,37,37,38,40,37,38,40,37,38,40,40,40,39,40,40,40,39,40,39,39,37,38,37,38,40,37,38,40,37,38,40,0,0,41,42,41,42,42,42,42,41,42,41,42,41,42,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["string",3]]],[[["str",0]]],[[]],[[["cudaerror",4]]],[[["likwiderror",4]]],[[["error",3]]],[[["errorkind",4]]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["errorkind",4]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["hashingscheme",4]],[[["",0],["",0]]],null,[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["partitionedrelation",3],["partitionedrelation",3],["launchablemutslice",3],["launchablemutslice",3],["stream",3]],["result",6]],[[["cudaradixjoin",3],["partitionedrelation",3],["partitionedrelation",3],["launchablemutslice",3],["launchablemutslice",3],["stream",3]],["result",6]],[[["radixpass",4],["radixbits",3],["hashingscheme",4],["gridsize",3],["blocksize",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["launchableslice",3],["launchableslice",3],["stream",3]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6,[["cudahashjoin",3]]]],[[["",0]],["cpuhashjoin",3]],[[["gridsize",3],["blocksize",3]]],[[["cudahashjoin",3],["launchableslice",3],["launchableslice",3],["stream",3]],["result",6]],[[["cpuhashjoin",3]],["result",6]],[[["",0]],["cudahashjoinbuilder",3]],[[["",0]],["cpuhashjoinbuilder",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["arc",3,[["hashtable",3]]]]],[[["arc",3,[["hashtable",3]]]]],[[["hashingscheme",4]]],[[["hashingscheme",4]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["bool",0]]],[[["bool",0]]],[[["",0]],["numagpuresult",6]],[[["",0]],["numagpuresult",6]],[[["mem",4,[["htentry",6]]],["",0]],["result",6]],[[["derefmem",4,[["htentry",6]]],["usize",0]],["result",6]],[[["mem",4,[["htentry",6]]],["usize",0]],["result",6]],[[["gridsize",3],["blocksize",3]]],[[["",0],["launchableslice",3],["launchableslice",3],["mem",4],["stream",3]],["result",6]],[[["",0],["u64",0]],["result",6]],[[["cudahashjoin",3],["launchableslice",3],["launchableslice",3],["mem",4],["stream",3]],["result",6]],[[["cpuhashjoin",3],["u64",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,[[["",0]],["usize",0]],null,[[["",0]],["partitionoffsetschunksmut",3]],[[["",0]],["partitionedrelationchunksmut",3,[["tuple",3]]]],[[["",0]],["radixpartitioninputchunk",3]],[[["",0]],["histogramalgorithmtype",4]],[[["",0]],["radixpass",4]],[[["",0]],["radixbits",3]],[[["",0]],["tuple",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["tuple",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["radixpass",4]],["bool",0]],[[["",0],["tuple",3]],["bool",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gpuhistogramalgorithm",4]]],[[["cpuhistogramalgorithm",4]]],[[]],[[]],[[["u32",0]]],[[]],null,[[["",0]]],[[["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0],["u32",0]],["result",6,[["vec",3,[["radixpartitioninputchunk",3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["usize",0]],[[["",0]],["numagpuresult",6]],[[["",0]],["numagpuresult",6]],[[["",0]],["numagpuresult",6]],[[["",0]],["numagpuresult",6]],[[["",0],["tuple",3]],["bool",0]],[[["histogramalgorithmtype",4],["u32",0],["u32",0],["memallocfn",6,[["u64",0]]]]],[[["usize",0],["histogramalgorithmtype",4],["u32",0],["u32",0],["memallocfn",6],["memallocfn",6,[["u64",0]]]]],[[["option",4,[["u32",0]]],["option",4,[["u32",0]]],["option",4,[["u32",0]]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["partitionedrelationmutslice",3]]]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],null,null,[[["",0]],["usize",0]],[[["",0]],["u32",0]],[[["",0],["u32",0]],["result",6,[["usize",0]]]],[[["",0],["u32",0]],["result",6,[["usize",0]]]],[[["",0],["radixpass",4]],["option",4,[["u32",0]]]],[[["",0],["radixpass",4]],["u32",0]],[[["",0],["radixpass",4]],["option",4,[["u32",0]]]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],null,[[["",0],["usize",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cpuhistogramalgorithm",4]],[[["",0]],["cpuradixpartitionalgorithm",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["cpuhistogramalgorithm",4],["cpuradixpartitionalgorithm",4],["u32",0],["derefmemtype",4]]],[[["",0],["radixpartitioninputchunk",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]],["radixpartitioninputchunk",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]],["partitionoffsetsmutslice",3,[["tuple",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]],["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]]]],["partitionedrelationmutslice",3,[["tuple",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]],["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]]]]],["result",6]],[[["cpuradixpartitioner",3],["radixpartitioninputchunk",3],["radixpartitioninputchunk",3],["partitionoffsetsmutslice",3,[["tuple",3]]],["partitionedrelationmutslice",3,[["tuple",3]]]],["result",6]],[[["",0],["radixpartitioninputchunk",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]],["partitionoffsetsmutslice",3,[["tuple",3,[["",26,[["devicecopy",8],["cpuradixpartitionable",8]]],["",26,[["devicecopy",8],["cpuradixpartitionable",8]]]]]]]],["result",6]],[[["cpuradixpartitioner",3],["radixpartitioninputchunk",3],["partitionoffsetsmutslice",3,[["tuple",3]]]],["result",6]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["gpuradixpartitioner",3],["radixpass",4]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["gpuhistogramalgorithm",4]],[[["",0]],["gpuradixpartitionalgorithm",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["cpuhistogramalgorithm",4]]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["gpuhistogramalgorithm",4],["gpuradixpartitionalgorithm",4],["radixbits",3],["gridsize",3],["blocksize",3],["usize",0]],["result",6]],[[["",0],["radixpass",4],["launchableslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["launchableslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["partitionoffsets",3],["partitionedrelation",3],["stream",3]],["result",6]],[[["gpuradixpartitioner",3],["radixpass",4],["launchableslice",3],["launchableslice",3],["partitionoffsets",3],["partitionedrelation",3],["stream",3]],["result",6]],[[["",0],["radixpass",4]],["result",6]],[[["",0],["radixpass",4],["launchableslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["partitionoffsets",3],["stream",3]],["result",6]],[[["",0],["radixpass",4],["launchableslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["launchableslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["launchablemutslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["launchablemutslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["partitionoffsets",3],["stream",3]],["result",6]],[[["gpuradixpartitioner",3],["radixpass",4],["launchableslice",3],["launchableslice",3],["launchablemutslice",3],["launchablemutslice",3],["partitionoffsets",3],["stream",3]],["result",6]],[[["",0],["radixpass",4],["u32",0],["partitionedrelation",3],["launchablemutslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["launchablemutslice",3,[["",26,[["devicecopy",8],["gpuradixpartitionable",8]]]]],["partitionoffsets",3],["stream",3]],["result",6]],[[["gpuradixpartitioner",3],["radixpass",4],["u32",0],["partitionedrelation",3],["launchablemutslice",3],["launchablemutslice",3],["partitionoffsets",3],["stream",3]],["result",6]],[[["gpuradixpartitioner",3],["radixpass",4],["launchableslice",3],["partitionoffsets",3],["stream",3]],["result",6]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["gpuprefixscanstate",3]],[[["",0],["",0]]],[[],["gpuprefixscanstate",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["result",6,[["usize",0]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"ErrorKind"],[3,"Error"],[13,"CudaError"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[13,"LikwidError"],[13,"Msg"],[13,"NulCharError"],[13,"NumaGpuError"],[13,"RuntimeError"],[4,"HashingScheme"],[3,"CudaRadixJoin"],[8,"CudaRadixJoinable"],[3,"CudaHashJoin"],[3,"CpuHashJoin"],[3,"HashTable"],[3,"CudaHashJoinBuilder"],[3,"CpuHashJoinBuilder"],[8,"CudaHashJoinable"],[8,"CpuHashJoinable"],[4,"HistogramAlgorithmType"],[4,"RadixPass"],[8,"RadixPartitionInputChunkable"],[3,"PartitionedRelation"],[3,"RadixPartitionInputChunk"],[3,"PartitionOffsets"],[3,"PartitionOffsetsChunksMut"],[3,"PartitionOffsetsMutSlice"],[3,"PartitionedRelationChunksMut"],[3,"PartitionedRelationMutSlice"],[3,"RadixBits"],[3,"Tuple"],[4,"CpuHistogramAlgorithm"],[4,"CpuRadixPartitionAlgorithm"],[3,"CpuRadixPartitioner"],[8,"CpuRadixPartitionable"],[4,"GpuHistogramAlgorithm"],[4,"GpuRadixPartitionAlgorithm"],[8,"GpuRadixPartitionable"],[3,"GpuRadixPartitioner"],[3,"GpuPrefixSum"],[3,"GpuPrefixScanState"]]},\
"tpch_bench":{"doc":"","t":[3,11,11,11,12,12,0,11,11,12,11,0,12,11,11,11,0,11,11,5,12,12,0,12,12,12,12,12,12,11,11,11,0,11,3,11,11,12,11,11,11,11,11,12,11,12,11,11,12,11,11,11,12,12,12,12,12,12,11,5,12,11,12,11,11,12,11,11,12,13,13,3,4,13,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,0,0,0,3,11,11,12,11,11,11,11,11,11,11,11,12,12,5,5,11,11,11,11,3,12,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,4,4,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CmdOpt","borrow","borrow_mut","clap","cpu_affinity","csv","data_point","deref","deref_mut","device_id","drop","error","execution_method","fill_data_point","from","from_clap","harness","init","into","main","page_type","query","query_6","rel_location","rel_mem_type","repeat","scale_factor","selection_variant","threads","try_from","try_into","type_id","types","vzip","DataPoint","borrow","borrow_mut","bytes","clone","clone_into","default","deref","deref_mut","device_codename","drop","execution_method","fmt","from","hostname","init","into","new","ns","page_type","relation_memory_location","relation_memory_type","scale_factor","selection_variant","serialize","serialize_vec","threads","to_owned","tpch_query","try_from","try_into","tuples","type_id","vzip","warm_up","CsvError","CudaError","Error","ErrorKind","IntegerOverflow","InvalidArgument","IoError","Msg","NulCharError","NumaGpuError","Result","RuntimeError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","into","into","kind","kind","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","measure","cpu","gpu","tables","Query6Cpu","borrow","borrow_mut","cpu_affinity","deref","deref_mut","drop","from","init","into","new","run","selection_variant","threads","tpch_q6_branching","tpch_q6_predication","try_from","try_into","type_id","vzip","Query6Gpu","block_size","borrow","borrow_mut","deref","deref_mut","drop","from","grid_size","init","into","module","new","run","selection_variant","try_from","try_into","type_id","vzip","LineItem","LineItemTuple","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","discount","discount","drop","drop","extendedprice","extendedprice","from","from","init","init","into","into","len","new","quantity","quantity","shipdate","shipdate","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ArgExecutionMethod","ArgMemType","ArgMemTypeHelper","ArgPageType","ArgSelectionVariant","Branching","Cpu","Default","DistributedNuma","Gpu","GpuBuildHetProbe","GpuStream","Het","Huge16GB","Huge16MB","Huge1GB","Huge2MB","Numa","NumaPinned","Pinned","Predication","Small","System","TransparentHuge","Unified","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","from_str","from_str","from_str","init","init","init","init","init","into","into","into","into","into","mem_type","node_ratios","page_type","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","variants","variants","variants","variants","vzip","vzip","vzip","vzip","vzip"],"q":["tpch_bench","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tpch_bench::data_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tpch_bench::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tpch_bench::error::ErrorKind","","","","","","","","","tpch_bench::harness","tpch_bench::query_6","","","tpch_bench::query_6::cpu","","","","","","","","","","","","","","","","","","","","tpch_bench::query_6::gpu","","","","","","","","","","","","","","","","","","","tpch_bench::query_6::tables","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tpch_bench::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Path to CPU affinity map file for CPU workers","Output filename for measurement CSV file","","","","Execute on GPU (See CUDA device list)","","","Execute on device(s) with in-place or streaming-transfer …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Page type with with to allocate memory","TPC-H query to run","","Allocate memory for inner relation on CPU or GPU (See …","Memory type with which to allocate data","Number of times to repeat the benchmark","TPC-H scale factor","Selection variant","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Serialize <code>Option&lt;Vec&lt;T&gt;&gt;</code> by converting it into a <code>String</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","A columnar LineItem table for Query 6.","A materialized LineItem tuple","","","","","","","","","","l_discount","","","","l_extendedprice","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","l_quantity","","l_shipdate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,3,3,0,0,3,3,3,3,3,3,0,3,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,3,3,4,4,4,4,4,4,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,5,6,7,8,9,10,11,12,13,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,17,17,16,17,16,17,16,17,16,17,16,17,16,17,0,0,0,0,0,18,19,20,21,19,19,19,19,20,20,20,20,21,21,21,18,20,21,20,21,21,20,19,18,22,21,20,19,18,22,21,20,19,18,21,20,19,18,21,20,19,18,22,21,20,19,18,22,21,20,19,18,22,21,20,19,18,21,21,20,20,19,19,18,18,22,21,20,19,18,22,21,20,19,18,21,20,19,18,22,21,20,19,18,22,22,22,22,21,20,19,18,21,20,19,18,21,20,19,18,21,20,19,18,22,21,20,19,18,22,21,20,19,18,22,21,20,19,18,21,20,19,18,22],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,null,[[["",0],["datapoint",3]],["result",6,[["datapoint",3]]]],[[]],[[["argmatches",3]]],null,[[],["usize",0]],[[]],[[],["result",6]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["datapoint",3]],[[["",0],["",0]]],[[],["datapoint",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],[[],["result",6]],null,null,null,null,null,null,[[["",0]],["result",4]],[[["option",4]],["result",4]],null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["string",3]]],[[]],[[["str",0]]],[[["cudaerror",4]]],[[["errorkind",4]]],[[["csverror",3]]],[[["numagpuerror",3]]],[[["ioerror",3]]],[[["datagenerror",3]]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["errorkind",4]],null,[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["u32",0],["option",4,[["box",3]]],["datapoint",3],["box",3]],["result",6]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["usize",0],["cpuaffinity",3],["argselectionvariant",4]]],[[["",0],["lineitem",3]],["result",6]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],null,[[],["usize",0]],[[]],null,[[["gridsize",3],["blocksize",3],["argselectionvariant",4]],["result",6]],[[["",0],["lineitem",3]],["result",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,null,[[["usize",0]]],[[["usize",0]]],null,null,[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]],["usize",0]],[[["u32",0],["derefmemtype",4]],["result",6,[["lineitem",3]]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argmemtype",4]],[[["",0]],["argpagetype",4]],[[["",0]],["argexecutionmethod",4]],[[["",0]],["argselectionvariant",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["argmemtype",4]],["bool",0]],[[["",0],["argpagetype",4]],["bool",0]],[[["",0],["argexecutionmethod",4]],["bool",0]],[[["",0],["argselectionvariant",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"CmdOpt"],[3,"DataPoint"],[4,"ErrorKind"],[3,"Error"],[13,"CsvError"],[13,"CudaError"],[13,"IntegerOverflow"],[13,"InvalidArgument"],[13,"IoError"],[13,"Msg"],[13,"NulCharError"],[13,"NumaGpuError"],[13,"RuntimeError"],[3,"Query6Cpu"],[3,"Query6Gpu"],[3,"LineItemTuple"],[3,"LineItem"],[4,"ArgSelectionVariant"],[4,"ArgExecutionMethod"],[4,"ArgPageType"],[4,"ArgMemType"],[3,"ArgMemTypeHelper"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};